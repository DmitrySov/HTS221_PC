
HTS221_PC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e3c  08005e3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e44  08005e44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08005ebc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08005ebc  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156e0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d3  00000000  00000000  00035780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00038058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00038f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027503  00000000  00000000  00039cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126cf  00000000  00000000  000611d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f060b  00000000  00000000  000738a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163ead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  00163f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d84 	.word	0x08005d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d84 	.word	0x08005d84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <read8>:

#include "HTS221.h"


static uint8_t read8(hts221_t* sensor, uint8_t Mem_reg)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af04      	add	r7, sp, #16
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, Mem_reg, 1, &value, 1, I2C_HTS_TIMEOUT);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	b299      	uxth	r1, r3
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	b29a      	uxth	r2, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2301      	movs	r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	f107 030f 	add.w	r3, r7, #15
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	f001 fbac 	bl	8001d00 <HAL_I2C_Mem_Read>

	return value;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <read16>:

static uint16_t read16(hts221_t* sensor, uint8_t Mem_reg)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b088      	sub	sp, #32
 80005b6:	af04      	add	r7, sp, #16
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	70fb      	strb	r3, [r7, #3]
	uint8_t value[2];

	HAL_I2C_Mem_Read(sensor->i2c_handler, sensor->address, (Mem_reg | 0x80), I2C_MEMADD_SIZE_8BIT, value, 2, I2C_HTS_TIMEOUT);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	b299      	uxth	r1, r3
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	2302      	movs	r3, #2
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	f001 fb8c 	bl	8001d00 <HAL_I2C_Mem_Read>

	return (((uint16_t)(value[1])) << 8) | (uint16_t)value[0];
 80005e8:	7b7b      	ldrb	r3, [r7, #13]
 80005ea:	021b      	lsls	r3, r3, #8
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	7b3b      	ldrb	r3, [r7, #12]
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	4313      	orrs	r3, r2
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	b29b      	uxth	r3, r3
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <write8>:

static void write8(hts221_t* sensor, uint8_t Mem_reg, uint8_t* data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af04      	add	r7, sp, #16
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	460b      	mov	r3, r1
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensor->i2c_handler, sensor->address, Mem_reg, 1, data, 1, I2C_HTS_TIMEOUT);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	b299      	uxth	r1, r3
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	b29a      	uxth	r2, r3
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	f001 fa54 	bl	8001ad8 <HAL_I2C_Mem_Write>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <HTS221_set_power_mode>:

/////////////////////////////////////////////


void HTS221_set_power_mode(hts221_t* sensor, bool mode)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
	// mode 1 - Active,  0 - Power down
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 8000644:	2120      	movs	r1, #32
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ff96 	bl	8000578 <read8>
 800064c:	4603      	mov	r3, r0
 800064e:	73fb      	strb	r3, [r7, #15]

	if(mode == 0) tmp &= 0x7F; // 0xxx xxxx
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d005      	beq.n	8000668 <HTS221_set_power_mode+0x30>
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000662:	b2db      	uxtb	r3, r3
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e004      	b.n	8000672 <HTS221_set_power_mode+0x3a>
	else
	{
		tmp |= 0x80;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800066e:	b2db      	uxtb	r3, r3
 8000670:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG1, &tmp);
 8000672:	f107 030f 	add.w	r3, r7, #15
 8000676:	461a      	mov	r2, r3
 8000678:	2120      	movs	r1, #32
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ffc0 	bl	8000600 <write8>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <HTS221_set_output_data_rate>:



void HTS221_set_output_data_rate(hts221_t* sensor, uint8_t data_rate)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	if(data_rate > 3) data_rate = 3;
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d901      	bls.n	800069e <HTS221_set_output_data_rate+0x16>
 800069a:	2303      	movs	r3, #3
 800069c:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG1);
 800069e:	2120      	movs	r1, #32
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ff69 	bl	8000578 <read8>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xFC; // XXXX XX00
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f023 0303 	bic.w	r3, r3, #3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
	tmp |= data_rate & 0x03; // double protection for writing wrong number
 80006b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b8:	f003 0303 	and.w	r3, r3, #3
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	73fb      	strb	r3, [r7, #15]

	write8(sensor, CTRL_REG1, &tmp);
 80006ca:	f107 030f 	add.w	r3, r7, #15
 80006ce:	461a      	mov	r2, r3
 80006d0:	2120      	movs	r1, #32
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff94 	bl	8000600 <write8>
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <HTS221_set_temp_sample>:



void HTS221_set_temp_sample(hts221_t* sensor, uint8_t sample_mode)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d901      	bls.n	80006f6 <HTS221_set_temp_sample+0x16>
 80006f2:	2307      	movs	r3, #7
 80006f4:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 80006f6:	2110      	movs	r1, #16
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff3d 	bl	8000578 <read8>
 80006fe:	4603      	mov	r3, r0
 8000700:	73fb      	strb	r3, [r7, #15]

	tmp &= 0xC7; // 0bXX00 0xxx
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000708:	b2db      	uxtb	r3, r3
 800070a:	73fb      	strb	r3, [r7, #15]
	tmp |= (sample_mode) << 3;
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	b25a      	sxtb	r2, r3
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b25b      	sxtb	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 800071e:	f107 030f 	add.w	r3, r7, #15
 8000722:	461a      	mov	r2, r3
 8000724:	2110      	movs	r1, #16
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff6a 	bl	8000600 <write8>
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <HTS221_set_humidity_sample>:

void HTS221_set_humidity_sample(hts221_t* sensor, uint8_t sample_mode)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	if(sample_mode > 7) sample_mode = 7;
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d901      	bls.n	800074a <HTS221_set_humidity_sample+0x16>
 8000746:	2307      	movs	r3, #7
 8000748:	70fb      	strb	r3, [r7, #3]

	uint8_t tmp;
	tmp = read8(sensor, AV_CONF);
 800074a:	2110      	movs	r1, #16
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ff13 	bl	8000578 <read8>
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8; // 0bXXXXX000
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	f023 0307 	bic.w	r3, r3, #7
 800075c:	b2db      	uxtb	r3, r3
 800075e:	73fb      	strb	r3, [r7, #15]

	tmp |= (sample_mode) & 0x07; // protection for writing number bigger than 7
 8000760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	b25a      	sxtb	r2, r3
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b25b      	sxtb	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	73fb      	strb	r3, [r7, #15]

	write8(sensor, AV_CONF, &tmp);
 8000776:	f107 030f 	add.w	r3, r7, #15
 800077a:	461a      	mov	r2, r3
 800077c:	2110      	movs	r1, #16
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ff3e 	bl	8000600 <write8>

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <HTS221_Init>:
	write8(sensor, CTRL_REG2, &tmp);
}


uint8_t HTS221_Init(hts221_t* sensor, I2C_HandleTypeDef* hi2c,  uint8_t Address)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4613      	mov	r3, r2
 8000798:	71fb      	strb	r3, [r7, #7]
	sensor->i2c_handler = hi2c;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	601a      	str	r2, [r3, #0]
	sensor->address = (Address << 1);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id;
	sensor_id = read8(sensor, WHO_AM_I);
 80007aa:	210f      	movs	r1, #15
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff fee3 	bl	8000578 <read8>
 80007b2:	4603      	mov	r3, r0
 80007b4:	75fb      	strb	r3, [r7, #23]
	if(sensor_id != 0xBC)
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	2bbc      	cmp	r3, #188	; 0xbc
 80007ba:	d001      	beq.n	80007c0 <HTS221_Init+0x34>
	{
		return 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	e08a      	b.n	80008d6 <HTS221_Init+0x14a>
	}

	// read calibration coefficients
	// 1. Temperature
	sensor->T0_degc_x8 = read8(sensor, T0_degC_x8);
 80007c0:	2132      	movs	r1, #50	; 0x32
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f7ff fed8 	bl	8000578 <read8>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	715a      	strb	r2, [r3, #5]
	sensor->T1_degc_x8 = read8(sensor, T1_degC_x8);
 80007d0:	2133      	movs	r1, #51	; 0x33
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff fed0 	bl	8000578 <read8>
 80007d8:	4603      	mov	r3, r0
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	719a      	strb	r2, [r3, #6]
	sensor->T0_out = (int16_t)read16(sensor, T0_OUT);
 80007e0:	213c      	movs	r1, #60	; 0x3c
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f7ff fee5 	bl	80005b2 <read16>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	811a      	strh	r2, [r3, #8]
	sensor->T1_out = (int16_t)read16(sensor, T1_OUT);
 80007f0:	213e      	movs	r1, #62	; 0x3e
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f7ff fedd 	bl	80005b2 <read16>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	815a      	strh	r2, [r3, #10]

	sensor->T0_MSB = (read8(sensor, T0_T1_MSB) & 0x3) << 8;
 8000800:	2135      	movs	r1, #53	; 0x35
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff feb8 	bl	8000578 <read8>
 8000808:	4603      	mov	r3, r0
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	b29b      	uxth	r3, r3
 800080e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000812:	b29a      	uxth	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	819a      	strh	r2, [r3, #12]
	sensor->T1_MSB = (read8(sensor, T0_T1_MSB) & 0x0C) << 6;
 8000818:	2135      	movs	r1, #53	; 0x35
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f7ff feac 	bl	8000578 <read8>
 8000820:	4603      	mov	r3, r0
 8000822:	019b      	lsls	r3, r3, #6
 8000824:	b29b      	uxth	r3, r3
 8000826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800082a:	b29a      	uxth	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	81da      	strh	r2, [r3, #14]

	sensor->T1_degc = ((sensor->T1_MSB) | (uint16_t)(sensor->T1_degc_x8)) >> 3;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	89db      	ldrh	r3, [r3, #14]
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	799b      	ldrb	r3, [r3, #6]
 800083a:	4313      	orrs	r3, r2
 800083c:	10db      	asrs	r3, r3, #3
 800083e:	b29a      	uxth	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	839a      	strh	r2, [r3, #28]
	sensor->T0_degc = ((sensor->T0_MSB) | (uint16_t)(sensor->T0_degc_x8)) >> 3;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	899b      	ldrh	r3, [r3, #12]
 8000848:	461a      	mov	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	4313      	orrs	r3, r2
 8000850:	10db      	asrs	r3, r3, #3
 8000852:	b29a      	uxth	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	835a      	strh	r2, [r3, #26]

	// 2. Humidity
	sensor->H0_rh_x2 = read8(sensor, H0_rH_x2);
 8000858:	2130      	movs	r1, #48	; 0x30
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff fe8c 	bl	8000578 <read8>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	741a      	strb	r2, [r3, #16]
	sensor->H1_rh_x2 = read8(sensor, H1_rH_x2);
 8000868:	2131      	movs	r1, #49	; 0x31
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f7ff fe84 	bl	8000578 <read8>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	745a      	strb	r2, [r3, #17]
	sensor->H0_T0_out = (int16_t)read16(sensor, H0_T0_OUT);
 8000878:	2136      	movs	r1, #54	; 0x36
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f7ff fe99 	bl	80005b2 <read16>
 8000880:	4603      	mov	r3, r0
 8000882:	b21a      	sxth	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	825a      	strh	r2, [r3, #18]
	sensor->H1_T0_out = (int16_t)read16(sensor, H1_T0_OUT);
 8000888:	213a      	movs	r1, #58	; 0x3a
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff fe91 	bl	80005b2 <read16>
 8000890:	4603      	mov	r3, r0
 8000892:	b21a      	sxth	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	829a      	strh	r2, [r3, #20]
	sensor->H0_rh = (sensor->H0_rh_x2) >> 1;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	7c1b      	ldrb	r3, [r3, #16]
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	82da      	strh	r2, [r3, #22]
	sensor->H1_rh = (sensor->H1_rh_x2) >> 1;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	7c5b      	ldrb	r3, [r3, #17]
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	831a      	strh	r2, [r3, #24]


	// set sample mode
	HTS221_set_temp_sample(sensor, TEMP_256);
 80008b4:	2107      	movs	r1, #7
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f7ff ff12 	bl	80006e0 <HTS221_set_temp_sample>
	HTS221_set_humidity_sample(sensor, HUM_512);
 80008bc:	2107      	movs	r1, #7
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f7ff ff38 	bl	8000734 <HTS221_set_humidity_sample>
	// set output data rate
	HTS221_set_output_data_rate(sensor, ONESHOT);
 80008c4:	2100      	movs	r1, #0
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f7ff fede 	bl	8000688 <HTS221_set_output_data_rate>
	// Turn on the device
 	HTS221_set_power_mode(sensor, 1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f7ff feb2 	bl	8000638 <HTS221_set_power_mode>
	return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HTS221_get_data>:


void HTS221_get_data(hts221_t* sensor, int16_t* temperature_value, uint16_t* humidity_val)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b088      	sub	sp, #32
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
	int32_t tmp_t, tmp_h;
	int16_t h_out, t_out;

	// wait for end of conversion

	t_out = read16(sensor, T_OUT);
 80008ea:	212a      	movs	r1, #42	; 0x2a
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff fe60 	bl	80005b2 <read16>
 80008f2:	4603      	mov	r3, r0
 80008f4:	83fb      	strh	r3, [r7, #30]
	h_out = read16(sensor, H_OUT);
 80008f6:	2128      	movs	r1, #40	; 0x28
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f7ff fe5a 	bl	80005b2 <read16>
 80008fe:	4603      	mov	r3, r0
 8000900:	83bb      	strh	r3, [r7, #28]

	// humidity calculations
	tmp_h = ((int32_t)(h_out - sensor->H0_T0_out)) * ((int32_t)(sensor->H1_rh - sensor->H0_rh));
 8000902:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800090c:	1a9b      	subs	r3, r3, r2
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8000914:	4611      	mov	r1, r2
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800091c:	1a8a      	subs	r2, r1, r2
 800091e:	fb02 f303 	mul.w	r3, r2, r3
 8000922:	61bb      	str	r3, [r7, #24]
	*humidity_val =  (uint16_t)(tmp_h/(sensor->H1_T0_out - sensor->H0_T0_out) + sensor->H0_rh);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	fb92 f3f3 	sdiv	r3, r2, r3
 800093a:	b29a      	uxth	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000942:	b29b      	uxth	r3, r3
 8000944:	4413      	add	r3, r2
 8000946:	b29a      	uxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	801a      	strh	r2, [r3, #0]

	// temperature calculations
	tmp_t = ((int32_t)(t_out - sensor->T0_out)) * ((int32_t)(sensor->T1_degc - sensor->T0_degc));
 800094c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000956:	1a9b      	subs	r3, r3, r2
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	8b92      	ldrh	r2, [r2, #28]
 800095c:	4611      	mov	r1, r2
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	8b52      	ldrh	r2, [r2, #26]
 8000962:	1a8a      	subs	r2, r1, r2
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	617b      	str	r3, [r7, #20]
	*temperature_value = tmp_t /(sensor->T1_out - sensor->T0_out) + sensor->T0_degc;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000970:	461a      	mov	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000980:	b29a      	uxth	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	8b5b      	ldrh	r3, [r3, #26]
 8000986:	4413      	add	r3, r2
 8000988:	b29b      	uxth	r3, r3
 800098a:	b21a      	sxth	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	801a      	strh	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <HTS221_DRDY_Enable>:
	HTS221_get_data(sensor, temperature_value, humidity_val);
}


void HTS221_DRDY_Enable(hts221_t* sensor, uint8_t PP_OD, uint8_t DRDY_H_L)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
 80009a4:	4613      	mov	r3, r2
 80009a6:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = read8(sensor, CTRL_REG3);
 80009a8:	2122      	movs	r1, #34	; 0x22
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fde4 	bl	8000578 <read8>
 80009b0:	4603      	mov	r3, r0
 80009b2:	73fb      	strb	r3, [r7, #15]

	// clear byte
	tmp &= 0x3B;  // 0b00XXX0XX
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	73fb      	strb	r3, [r7, #15]

	// Enable DRDY pin
	tmp |= 0x04;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	73fb      	strb	r3, [r7, #15]

	// Set output type 0 - push pull, 1 - open drain
	if(PP_OD == OPEN_DRAIN)
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d104      	bne.n	80009d8 <HTS221_DRDY_Enable+0x40>
	{
		tmp |= 0x40;
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	73fb      	strb	r3, [r7, #15]
	}

	if(DRDY_H_L == ACTIVE_LOW)
 80009d8:	78bb      	ldrb	r3, [r7, #2]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d104      	bne.n	80009e8 <HTS221_DRDY_Enable+0x50>
	{
		tmp |= 0x80;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	73fb      	strb	r3, [r7, #15]
	}

	write8(sensor, CTRL_REG3, &tmp);
 80009e8:	f107 030f 	add.w	r3, r7, #15
 80009ec:	461a      	mov	r2, r3
 80009ee:	2122      	movs	r1, #34	; 0x22
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fe05 	bl	8000600 <write8>

}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f000 fbdf 	bl	80011c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f87e 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f000 f978 	bl	8000d00 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000a10:	f000 f8de 	bl	8000bd0 <MX_I2C2_Init>
  MX_RTC_Init();
 8000a14:	f000 f91c 	bl	8000c50 <MX_RTC_Init>
  MX_UART4_Init();
 8000a18:	f000 f942 	bl	8000ca0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HTS221_Init(&HTS221, &hi2c2, DEV_ADDR);
 8000a1c:	225f      	movs	r2, #95	; 0x5f
 8000a1e:	492f      	ldr	r1, [pc, #188]	; (8000adc <main+0xdc>)
 8000a20:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <main+0xe0>)
 8000a22:	f7ff feb3 	bl	800078c <HTS221_Init>
  HTS221_DRDY_Enable(&HTS221, OPEN_DRAIN, ACTIVE_LOW);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2101      	movs	r1, #1
 8000a2a:	482d      	ldr	r0, [pc, #180]	; (8000ae0 <main+0xe0>)
 8000a2c:	f7ff ffb4 	bl	8000998 <HTS221_DRDY_Enable>
  HTS221_set_output_data_rate(&HTS221, Hz_1);
 8000a30:	2101      	movs	r1, #1
 8000a32:	482b      	ldr	r0, [pc, #172]	; (8000ae0 <main+0xe0>)
 8000a34:	f7ff fe28 	bl	8000688 <HTS221_set_output_data_rate>
 // HTS221_get_data_OneHot(&HTS221, &temp, &humidity);
  HAL_UART_Receive_IT(&huart4, (uint8_t*)rxBuffer, 1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	492a      	ldr	r1, [pc, #168]	; (8000ae4 <main+0xe4>)
 8000a3c:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <main+0xe8>)
 8000a3e:	f003 fad7 	bl	8003ff0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(flag_HTS221 == 1)
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <main+0xec>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d11c      	bne.n	8000a84 <main+0x84>
	   {
		  HTS221_get_data(&HTS221, &temp, &humidity);
 8000a4a:	4a29      	ldr	r2, [pc, #164]	; (8000af0 <main+0xf0>)
 8000a4c:	4929      	ldr	r1, [pc, #164]	; (8000af4 <main+0xf4>)
 8000a4e:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <main+0xe0>)
 8000a50:	f7ff ff45 	bl	80008de <HTS221_get_data>
          sprintf(txBuffer, "Temperature: %d C\n Humidity: %d\%%\n", temp, humidity);
 8000a54:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <main+0xf4>)
 8000a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <main+0xf0>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	4925      	ldr	r1, [pc, #148]	; (8000af8 <main+0xf8>)
 8000a62:	4826      	ldr	r0, [pc, #152]	; (8000afc <main+0xfc>)
 8000a64:	f004 fd60 	bl	8005528 <siprintf>
		  HAL_UART_Transmit(&huart4, (uint8_t*)txBuffer, strlen(txBuffer), 1000);
 8000a68:	4824      	ldr	r0, [pc, #144]	; (8000afc <main+0xfc>)
 8000a6a:	f7ff fbb1 	bl	80001d0 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	4921      	ldr	r1, [pc, #132]	; (8000afc <main+0xfc>)
 8000a78:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <main+0xe8>)
 8000a7a:	f003 fa25 	bl	8003ec8 <HAL_UART_Transmit>
		  flag_HTS221 = 0;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <main+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	   }
	  if(flag_rxTerminal == 1)
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <main+0x100>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d1da      	bne.n	8000a42 <main+0x42>
	  {
		  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a90:	481c      	ldr	r0, [pc, #112]	; (8000b04 <main+0x104>)
 8000a92:	f000 ff5f 	bl	8001954 <HAL_GPIO_TogglePin>
		  HTS221_get_data(&HTS221, &temp, &humidity);
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <main+0xf0>)
 8000a98:	4916      	ldr	r1, [pc, #88]	; (8000af4 <main+0xf4>)
 8000a9a:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <main+0xe0>)
 8000a9c:	f7ff ff1f 	bl	80008de <HTS221_get_data>
		  sprintf(txBuffer, "Temperature: %d C\n Humidity: %d\%%\n", temp, humidity);
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <main+0xf4>)
 8000aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <main+0xf0>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	4912      	ldr	r1, [pc, #72]	; (8000af8 <main+0xf8>)
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <main+0xfc>)
 8000ab0:	f004 fd3a 	bl	8005528 <siprintf>
		  HAL_UART_Transmit(&huart4, (uint8_t*)txBuffer, strlen(txBuffer), 1000);
 8000ab4:	4811      	ldr	r0, [pc, #68]	; (8000afc <main+0xfc>)
 8000ab6:	f7ff fb8b 	bl	80001d0 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	490e      	ldr	r1, [pc, #56]	; (8000afc <main+0xfc>)
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <main+0xe8>)
 8000ac6:	f003 f9ff 	bl	8003ec8 <HAL_UART_Transmit>
		  flag_rxTerminal = 0;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <main+0x100>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart4, (uint8_t*)rxBuffer, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4904      	ldr	r1, [pc, #16]	; (8000ae4 <main+0xe4>)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <main+0xe8>)
 8000ad6:	f003 fa8b 	bl	8003ff0 <HAL_UART_Receive_IT>
	  if(flag_HTS221 == 1)
 8000ada:	e7b2      	b.n	8000a42 <main+0x42>
 8000adc:	200000d4 	.word	0x200000d4
 8000ae0:	200001cc 	.word	0x200001cc
 8000ae4:	200000c4 	.word	0x200000c4
 8000ae8:	20000148 	.word	0x20000148
 8000aec:	2000008c 	.word	0x2000008c
 8000af0:	20000122 	.word	0x20000122
 8000af4:	20000120 	.word	0x20000120
 8000af8:	08005d9c 	.word	0x08005d9c
 8000afc:	20000090 	.word	0x20000090
 8000b00:	2000008d 	.word	0x2000008d
 8000b04:	48000400 	.word	0x48000400

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b096      	sub	sp, #88	; 0x58
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2244      	movs	r2, #68	; 0x44
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 fcfe 	bl	8005518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b2e:	f001 fd5d 	bl	80025ec <HAL_PWREx_ControlVoltageScaling>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b38:	f000 f97a 	bl	8000e30 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b3c:	f001 fd38 	bl	80025b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <SystemClock_Config+0xc4>)
 8000b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b46:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <SystemClock_Config+0xc4>)
 8000b48:	f023 0318 	bic.w	r3, r3, #24
 8000b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000b50:	231c      	movs	r3, #28
 8000b52:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b64:	2360      	movs	r3, #96	; 0x60
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b74:	2328      	movs	r3, #40	; 0x28
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fd85 	bl	8002698 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b94:	f000 f94c 	bl	8000e30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 f957 	bl	8002e64 <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000bbc:	f000 f938 	bl	8000e30 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bc0:	f002 fe40 	bl	8003844 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bc4:	bf00      	nop
 8000bc6:	3758      	adds	r7, #88	; 0x58
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_I2C2_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <MX_I2C2_Init+0x7c>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c0c:	f000 fed4 	bl	80019b8 <HAL_I2C_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c16:	f000 f90b 	bl	8000e30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c1e:	f001 fc2f 	bl	8002480 <HAL_I2CEx_ConfigAnalogFilter>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c28:	f000 f902 	bl	8000e30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_I2C2_Init+0x74>)
 8000c30:	f001 fc71 	bl	8002516 <HAL_I2CEx_ConfigDigitalFilter>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 f8f9 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000d4 	.word	0x200000d4
 8000c48:	40005800 	.word	0x40005800
 8000c4c:	10909cec 	.word	0x10909cec

08000c50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c56:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <MX_RTC_Init+0x4c>)
 8000c58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c62:	227f      	movs	r2, #127	; 0x7f
 8000c64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c68:	22ff      	movs	r2, #255	; 0xff
 8000c6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c86:	f002 ffbf 	bl	8003c08 <HAL_RTC_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c90:	f000 f8ce 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000124 	.word	0x20000124
 8000c9c:	40002800 	.word	0x40002800

08000ca0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MX_UART4_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_UART4_Init+0x58>)
 8000ce4:	f003 f8a2 	bl	8003e2c <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 f89f 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000148 	.word	0x20000148
 8000cfc:	40004c00 	.word	0x40004c00

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_GPIO_Init+0xbc>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d64:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <MX_GPIO_Init+0xc0>)
 8000d66:	f000 fddd 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <MX_GPIO_Init+0xc4>)
 8000d82:	f000 fc25 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000d86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <MX_GPIO_Init+0xc0>)
 8000da0:	f000 fc16 	bl	80015d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f000 fb5c 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dae:	2028      	movs	r0, #40	; 0x28
 8000db0:	f000 fb75 	bl	800149e <HAL_NVIC_EnableIRQ>

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	48000800 	.word	0x48000800

08000dc8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd8:	d102      	bne.n	8000de0 <HAL_GPIO_EXTI_Callback+0x18>
	 {
		flag_HTS221 = 1;
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <HAL_GPIO_EXTI_Callback+0x24>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	 }
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	2000008c 	.word	0x2000008c

08000df0 <HAL_UART_RxCpltCallback>:

  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	 if(huart == &huart4)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_UART_RxCpltCallback+0x34>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d10c      	bne.n	8000e1a <HAL_UART_RxCpltCallback+0x2a>
	 {
	    if(rxBuffer[0] == '1')
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_UART_RxCpltCallback+0x38>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b31      	cmp	r3, #49	; 0x31
 8000e06:	d103      	bne.n	8000e10 <HAL_UART_RxCpltCallback+0x20>
	    {
	       flag_rxTerminal = 1;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_UART_RxCpltCallback+0x3c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
	    }
	    else HAL_UART_Receive_IT(&huart4, (uint8_t*)rxBuffer, 1);
	 }
  }
 8000e0e:	e004      	b.n	8000e1a <HAL_UART_RxCpltCallback+0x2a>
	    else HAL_UART_Receive_IT(&huart4, (uint8_t*)rxBuffer, 1);
 8000e10:	2201      	movs	r2, #1
 8000e12:	4905      	ldr	r1, [pc, #20]	; (8000e28 <HAL_UART_RxCpltCallback+0x38>)
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <HAL_UART_RxCpltCallback+0x34>)
 8000e16:	f003 f8eb 	bl	8003ff0 <HAL_UART_Receive_IT>
  }
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000148 	.word	0x20000148
 8000e28:	200000c4 	.word	0x200000c4
 8000e2c:	2000008d 	.word	0x2000008d

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x44>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_MspInit+0x44>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_MspInit+0x44>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x44>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6593      	str	r3, [r2, #88]	; 0x58
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ac      	sub	sp, #176	; 0xb0
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2288      	movs	r2, #136	; 0x88
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f004 fb37 	bl	8005518 <memset>
  if(hi2c->Instance==I2C2)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a21      	ldr	r2, [pc, #132]	; (8000f34 <HAL_I2C_MspInit+0xb0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d13b      	bne.n	8000f2c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 f9d5 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ecc:	f7ff ffb0 	bl	8000e30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ee8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f02:	2304      	movs	r3, #4
 8000f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <HAL_I2C_MspInit+0xb8>)
 8000f10:	f000 fb5e 	bl	80015d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000f1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	37b0      	adds	r7, #176	; 0xb0
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40005800 	.word	0x40005800
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0a4      	sub	sp, #144	; 0x90
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	2288      	movs	r2, #136	; 0x88
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fae1 	bl	8005518 <memset>
  if(hrtc->Instance==RTC)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_RTC_MspInit+0x5c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d118      	bne.n	8000f92 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 f97c 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f7e:	f7ff ff57 	bl	8000e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_RTC_MspInit+0x60>)
 8000f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f88:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <HAL_RTC_MspInit+0x60>)
 8000f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3790      	adds	r7, #144	; 0x90
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40002800 	.word	0x40002800
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ac      	sub	sp, #176	; 0xb0
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2288      	movs	r2, #136	; 0x88
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 faa7 	bl	8005518 <memset>
  if(huart->Instance==UART4)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a25      	ldr	r2, [pc, #148]	; (8001064 <HAL_UART_MspInit+0xc0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d143      	bne.n	800105c <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 f945 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fec:	f7ff ff20 	bl	8000e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_UART_MspInit+0xc4>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff4:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <HAL_UART_MspInit+0xc4>)
 8000ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_UART_MspInit+0xc4>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_UART_MspInit+0xc4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_UART_MspInit+0xc4>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_UART_MspInit+0xc4>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001020:	2303      	movs	r3, #3
 8001022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001038:	2308      	movs	r3, #8
 800103a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f000 fac2 	bl	80015d0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2034      	movs	r0, #52	; 0x34
 8001052:	f000 fa08 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001056:	2034      	movs	r0, #52	; 0x34
 8001058:	f000 fa21 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	37b0      	adds	r7, #176	; 0xb0
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40004c00 	.word	0x40004c00
 8001068:	40021000 	.word	0x40021000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 f8da 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010c8:	f000 fc5e 	bl	8001988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <UART4_IRQHandler+0x10>)
 80010d6:	f002 ffe1 	bl	800409c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000148 	.word	0x20000148

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f004 f9d6 	bl	80054c4 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20018000 	.word	0x20018000
 8001144:	00000400 	.word	0x00000400
 8001148:	200000c8 	.word	0x200000c8
 800114c:	20000200 	.word	0x20000200

08001150 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff ffea 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800117e:	490d      	ldr	r1, [pc, #52]	; (80011b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <LoopForever+0xe>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001194:	4c0a      	ldr	r4, [pc, #40]	; (80011c0 <LoopForever+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f004 f995 	bl	80054d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a6:	f7ff fc2b 	bl	8000a00 <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011b8:	08005e4c 	.word	0x08005e4c
  ldr r2, =_sbss
 80011bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011c0:	20000200 	.word	0x20000200

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>

080011c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f93d 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f80e 	bl	80011f8 <HAL_InitTick>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	e001      	b.n	80011ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e8:	f7ff fe28 	bl	8000e3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_InitTick+0x6c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d023      	beq.n	8001254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_InitTick+0x70>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_InitTick+0x6c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f949 	bl	80014ba <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10f      	bne.n	800124e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d809      	bhi.n	8001248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f913 	bl	8001466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_InitTick+0x74>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e007      	b.n	8001258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e004      	b.n	8001258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e001      	b.n	8001258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	200001ec 	.word	0x200001ec

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200001ec 	.word	0x200001ec

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff3e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff31 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d008      	beq.n	80014fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2204      	movs	r2, #4
 80014ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e022      	b.n	8001542 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020e 	bic.w	r2, r2, #14
 800150a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f003 021c 	and.w	r2, r3, #28
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2101      	movs	r1, #1
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d005      	beq.n	8001572 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2204      	movs	r2, #4
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e029      	b.n	80015c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 020e 	bic.w	r2, r2, #14
 8001580:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f003 021c 	and.w	r2, r3, #28
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
    }
  }
  return status;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e17f      	b.n	80018e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8171 	beq.w	80018da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0201 	and.w	r2, r3, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b03      	cmp	r3, #3
 800167c:	d118      	bne.n	80016b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001684:	2201      	movs	r2, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	f003 0201 	and.w	r2, r3, #1
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d017      	beq.n	80016ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d123      	bne.n	8001740 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	6939      	ldr	r1, [r7, #16]
 800173c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80ac 	beq.w	80018da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <HAL_GPIO_Init+0x330>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	4a5e      	ldr	r2, [pc, #376]	; (8001900 <HAL_GPIO_Init+0x330>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6613      	str	r3, [r2, #96]	; 0x60
 800178e:	4b5c      	ldr	r3, [pc, #368]	; (8001900 <HAL_GPIO_Init+0x330>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800179a:	4a5a      	ldr	r2, [pc, #360]	; (8001904 <HAL_GPIO_Init+0x334>)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	220f      	movs	r2, #15
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017c4:	d025      	beq.n	8001812 <HAL_GPIO_Init+0x242>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4f      	ldr	r2, [pc, #316]	; (8001908 <HAL_GPIO_Init+0x338>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01f      	beq.n	800180e <HAL_GPIO_Init+0x23e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4e      	ldr	r2, [pc, #312]	; (800190c <HAL_GPIO_Init+0x33c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d019      	beq.n	800180a <HAL_GPIO_Init+0x23a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4d      	ldr	r2, [pc, #308]	; (8001910 <HAL_GPIO_Init+0x340>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0x236>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_GPIO_Init+0x344>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00d      	beq.n	8001802 <HAL_GPIO_Init+0x232>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4b      	ldr	r2, [pc, #300]	; (8001918 <HAL_GPIO_Init+0x348>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x22e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4a      	ldr	r2, [pc, #296]	; (800191c <HAL_GPIO_Init+0x34c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_GPIO_Init+0x22a>
 80017f6:	2306      	movs	r3, #6
 80017f8:	e00c      	b.n	8001814 <HAL_GPIO_Init+0x244>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e00a      	b.n	8001814 <HAL_GPIO_Init+0x244>
 80017fe:	2305      	movs	r3, #5
 8001800:	e008      	b.n	8001814 <HAL_GPIO_Init+0x244>
 8001802:	2304      	movs	r3, #4
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x244>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_Init+0x244>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_Init+0x244>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x244>
 8001812:	2300      	movs	r3, #0
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001824:	4937      	ldr	r1, [pc, #220]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_GPIO_Init+0x350>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001856:	4a32      	ldr	r2, [pc, #200]	; (8001920 <HAL_GPIO_Init+0x350>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_GPIO_Init+0x350>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001880:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_GPIO_Init+0x350>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_GPIO_Init+0x350>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_GPIO_Init+0x350>)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_GPIO_Init+0x350>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_GPIO_Init+0x350>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f47f ae78 	bne.w	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000
 8001908:	48000400 	.word	0x48000400
 800190c:	48000800 	.word	0x48000800
 8001910:	48000c00 	.word	0x48000c00
 8001914:	48001000 	.word	0x48001000
 8001918:	48001400 	.word	0x48001400
 800191c:	48001800 	.word	0x48001800
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001940:	e002      	b.n	8001948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	041a      	lsls	r2, r3, #16
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	43d9      	mvns	r1, r3
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	400b      	ands	r3, r1
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fa0e 	bl	8000dc8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e081      	b.n	8001ace <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fa50 	bl	8000e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	e006      	b.n	8001a40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d104      	bne.n	8001a52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69d9      	ldr	r1, [r3, #28]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	817b      	strh	r3, [r7, #10]
 8001aea:	460b      	mov	r3, r1
 8001aec:	813b      	strh	r3, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	f040 80f9 	bne.w	8001cf2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_I2C_Mem_Write+0x34>
 8001b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0ed      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Mem_Write+0x4e>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e0e6      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b2e:	f7ff fbb3 	bl	8001298 <HAL_GetTick>
 8001b32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2319      	movs	r3, #25
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 fac3 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0d1      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2221      	movs	r2, #33	; 0x21
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a3a      	ldr	r2, [r7, #32]
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b78:	88f8      	ldrh	r0, [r7, #6]
 8001b7a:	893a      	ldrh	r2, [r7, #8]
 8001b7c:	8979      	ldrh	r1, [r7, #10]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4603      	mov	r3, r0
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f9d3 	bl	8001f34 <I2C_RequestMemoryWrite>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0a9      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d90e      	bls.n	8001bc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	22ff      	movs	r2, #255	; 0xff
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	8979      	ldrh	r1, [r7, #10]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fc2b 	bl	800241c <I2C_TransferConfig>
 8001bc6:	e00f      	b.n	8001be8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	8979      	ldrh	r1, [r7, #10]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fc1a 	bl	800241c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 faad 	bl	800214c <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e07b      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d034      	beq.n	8001ca0 <HAL_I2C_Mem_Write+0x1c8>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d130      	bne.n	8001ca0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	2200      	movs	r2, #0
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fa3f 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e04d      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2bff      	cmp	r3, #255	; 0xff
 8001c60:	d90e      	bls.n	8001c80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fbcf 	bl	800241c <I2C_TransferConfig>
 8001c7e:	e00f      	b.n	8001ca0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	8979      	ldrh	r1, [r7, #10]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fbbe 	bl	800241c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d19e      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fa8c 	bl	80021cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e01a      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_I2C_Mem_Write+0x224>)
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
  }
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	fe00e800 	.word	0xfe00e800

08001d00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	817b      	strh	r3, [r7, #10]
 8001d12:	460b      	mov	r3, r1
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	f040 80fd 	bne.w	8001f22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_I2C_Mem_Read+0x34>
 8001d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0f1      	b.n	8001f24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Mem_Read+0x4e>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e0ea      	b.n	8001f24 <HAL_I2C_Mem_Read+0x224>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d56:	f7ff fa9f 	bl	8001298 <HAL_GetTick>
 8001d5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2319      	movs	r3, #25
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f9af 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0d5      	b.n	8001f24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2222      	movs	r2, #34	; 0x22
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da0:	88f8      	ldrh	r0, [r7, #6]
 8001da2:	893a      	ldrh	r2, [r7, #8]
 8001da4:	8979      	ldrh	r1, [r7, #10]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4603      	mov	r3, r0
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f913 	bl	8001fdc <I2C_RequestMemoryRead>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0ad      	b.n	8001f24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2bff      	cmp	r3, #255	; 0xff
 8001dd0:	d90e      	bls.n	8001df0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	22ff      	movs	r2, #255	; 0xff
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	8979      	ldrh	r1, [r7, #10]
 8001de0:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <HAL_I2C_Mem_Read+0x22c>)
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fb17 	bl	800241c <I2C_TransferConfig>
 8001dee:	e00f      	b.n	8001e10 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	8979      	ldrh	r1, [r7, #10]
 8001e02:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_I2C_Mem_Read+0x22c>)
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fb06 	bl	800241c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	2200      	movs	r2, #0
 8001e18:	2104      	movs	r1, #4
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f956 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07c      	b.n	8001f24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d034      	beq.n	8001ed0 <HAL_I2C_Mem_Read+0x1d0>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d130      	bne.n	8001ed0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f927 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e04d      	b.n	8001f24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2bff      	cmp	r3, #255	; 0xff
 8001e90:	d90e      	bls.n	8001eb0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	22ff      	movs	r2, #255	; 0xff
 8001e96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	8979      	ldrh	r1, [r7, #10]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 fab7 	bl	800241c <I2C_TransferConfig>
 8001eae:	e00f      	b.n	8001ed0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	8979      	ldrh	r1, [r7, #10]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 faa6 	bl	800241c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d19a      	bne.n	8001e10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f974 	bl	80021cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e01a      	b.n	8001f24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_I2C_Mem_Read+0x230>)
 8001f02:	400b      	ands	r3, r1
 8001f04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
  }
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	80002400 	.word	0x80002400
 8001f30:	fe00e800 	.word	0xfe00e800

08001f34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	4611      	mov	r1, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	817b      	strh	r3, [r7, #10]
 8001f46:	460b      	mov	r3, r1
 8001f48:	813b      	strh	r3, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	8979      	ldrh	r1, [r7, #10]
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <I2C_RequestMemoryWrite+0xa4>)
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fa5d 	bl	800241c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	69b9      	ldr	r1, [r7, #24]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f8f0 	bl	800214c <I2C_WaitOnTXISFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e02c      	b.n	8001fd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f7c:	893b      	ldrh	r3, [r7, #8]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
 8001f86:	e015      	b.n	8001fb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f88:	893b      	ldrh	r3, [r7, #8]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	69b9      	ldr	r1, [r7, #24]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f8d6 	bl	800214c <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e012      	b.n	8001fd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f884 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	80002000 	.word	0x80002000

08001fdc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	817b      	strh	r3, [r7, #10]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	813b      	strh	r3, [r7, #8]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	8979      	ldrh	r1, [r7, #10]
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <I2C_RequestMemoryRead+0xa4>)
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2300      	movs	r3, #0
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fa0a 	bl	800241c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f89d 	bl	800214c <I2C_WaitOnTXISFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e02c      	b.n	8002076 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002022:	893b      	ldrh	r3, [r7, #8]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
 800202c:	e015      	b.n	800205a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800202e:	893b      	ldrh	r3, [r7, #8]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	b29b      	uxth	r3, r3
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f883 	bl	800214c <I2C_WaitOnTXISFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e012      	b.n	8002076 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002050:	893b      	ldrh	r3, [r7, #8]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2200      	movs	r2, #0
 8002062:	2140      	movs	r1, #64	; 0x40
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f831 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	80002000 	.word	0x80002000

08002084 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d103      	bne.n	80020a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d007      	beq.n	80020c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	619a      	str	r2, [r3, #24]
  }
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020dc:	e022      	b.n	8002124 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d01e      	beq.n	8002124 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7ff f8d7 	bl	8001298 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d113      	bne.n	8002124 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e00f      	b.n	8002144 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	429a      	cmp	r2, r3
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	429a      	cmp	r2, r3
 8002140:	d0cd      	beq.n	80020de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002158:	e02c      	b.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f870 	bl	8002244 <I2C_IsErrorOccurred>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e02a      	b.n	80021c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d01e      	beq.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002176:	f7ff f88f 	bl	8001298 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	429a      	cmp	r2, r3
 8002184:	d302      	bcc.n	800218c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d113      	bne.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e007      	b.n	80021c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d1cb      	bne.n	800215a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021d8:	e028      	b.n	800222c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f830 	bl	8002244 <I2C_IsErrorOccurred>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e026      	b.n	800223c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7ff f853 	bl	8001298 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d302      	bcc.n	8002204 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d113      	bne.n	800222c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	f043 0220 	orr.w	r2, r3, #32
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e007      	b.n	800223c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b20      	cmp	r3, #32
 8002238:	d1cf      	bne.n	80021da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d075      	beq.n	800235c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2210      	movs	r2, #16
 8002276:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002278:	e056      	b.n	8002328 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d052      	beq.n	8002328 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7ff f809 	bl	8001298 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_IsErrorOccurred+0x54>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d147      	bne.n	8002328 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ba:	d12e      	bne.n	800231a <I2C_IsErrorOccurred+0xd6>
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c2:	d02a      	beq.n	800231a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d027      	beq.n	800231a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022da:	f7fe ffdd 	bl	8001298 <HAL_GetTick>
 80022de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e0:	e01b      	b.n	800231a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022e2:	f7fe ffd9 	bl	8001298 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b19      	cmp	r3, #25
 80022ee:	d914      	bls.n	800231a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b20      	cmp	r3, #32
 8002326:	d1dc      	bne.n	80022e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b20      	cmp	r3, #32
 8002334:	d003      	beq.n	800233e <I2C_IsErrorOccurred+0xfa>
 8002336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800233a:	2b00      	cmp	r3, #0
 800233c:	d09d      	beq.n	800227a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800233e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2220      	movs	r2, #32
 800234c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80023ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01c      	beq.n	800240c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f7ff fe56 	bl	8002084 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <I2C_IsErrorOccurred+0x1d4>)
 80023e4:	400b      	ands	r3, r1
 80023e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800240c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002410:	4618      	mov	r0, r3
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	fe00e800 	.word	0xfe00e800

0800241c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	817b      	strh	r3, [r7, #10]
 800242a:	4613      	mov	r3, r2
 800242c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800242e:	897b      	ldrh	r3, [r7, #10]
 8002430:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002434:	7a7b      	ldrb	r3, [r7, #9]
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800243c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	4313      	orrs	r3, r2
 8002446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800244a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	0d5b      	lsrs	r3, r3, #21
 8002456:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <I2C_TransferConfig+0x60>)
 800245c:	430b      	orrs	r3, r1
 800245e:	43db      	mvns	r3, r3
 8002460:	ea02 0103 	and.w	r1, r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	03ff63ff 	.word	0x03ff63ff

08002480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	d138      	bne.n	8002508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e032      	b.n	800250a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	; 0x24
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b20      	cmp	r3, #32
 800252a:	d139      	bne.n	80025a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002536:	2302      	movs	r3, #2
 8002538:	e033      	b.n	80025a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2224      	movs	r2, #36	; 0x24
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002568:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40007000 	.word	0x40007000

080025ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fa:	d130      	bne.n	800265e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002608:	d038      	beq.n	800267c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002612:	4a1e      	ldr	r2, [pc, #120]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002618:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2232      	movs	r2, #50	; 0x32
 8002620:	fb02 f303 	mul.w	r3, r2, r3
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9b      	lsrs	r3, r3, #18
 800262c:	3301      	adds	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002630:	e002      	b.n	8002638 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3b01      	subs	r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002644:	d102      	bne.n	800264c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f2      	bne.n	8002632 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002658:	d110      	bne.n	800267c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e00f      	b.n	800267e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d007      	beq.n	800267c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002674:	4a05      	ldr	r2, [pc, #20]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40007000 	.word	0x40007000
 8002690:	20000000 	.word	0x20000000
 8002694:	431bde83 	.word	0x431bde83

08002698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e3d4      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026aa:	4ba1      	ldr	r3, [pc, #644]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b4:	4b9e      	ldr	r3, [pc, #632]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80e4 	beq.w	8002894 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_RCC_OscConfig+0x4a>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b0c      	cmp	r3, #12
 80026d6:	f040 808b 	bne.w	80027f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	f040 8087 	bne.w	80027f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026e2:	4b93      	ldr	r3, [pc, #588]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x62>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e3ac      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	4b8c      	ldr	r3, [pc, #560]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_RCC_OscConfig+0x7c>
 800270a:	4b89      	ldr	r3, [pc, #548]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002712:	e005      	b.n	8002720 <HAL_RCC_OscConfig+0x88>
 8002714:	4b86      	ldr	r3, [pc, #536]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002720:	4293      	cmp	r3, r2
 8002722:	d223      	bcs.n	800276c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fd41 	bl	80031b0 <RCC_SetFlashLatencyFromMSIRange>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e38d      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002738:	4b7d      	ldr	r3, [pc, #500]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a7c      	ldr	r2, [pc, #496]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800273e:	f043 0308 	orr.w	r3, r3, #8
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b7a      	ldr	r3, [pc, #488]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4977      	ldr	r1, [pc, #476]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002756:	4b76      	ldr	r3, [pc, #472]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	4972      	ldr	r1, [pc, #456]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
 800276a:	e025      	b.n	80027b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276c:	4b70      	ldr	r3, [pc, #448]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6f      	ldr	r2, [pc, #444]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002772:	f043 0308 	orr.w	r3, r3, #8
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	496a      	ldr	r1, [pc, #424]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278a:	4b69      	ldr	r3, [pc, #420]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	4965      	ldr	r1, [pc, #404]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fd01 	bl	80031b0 <RCC_SetFlashLatencyFromMSIRange>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e34d      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b8:	f000 fc36 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	495a      	ldr	r1, [pc, #360]	; (8002934 <HAL_RCC_OscConfig+0x29c>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
 80027d4:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x2a0>)
 80027d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027d8:	4b58      	ldr	r3, [pc, #352]	; (800293c <HAL_RCC_OscConfig+0x2a4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fd0b 	bl	80011f8 <HAL_InitTick>
 80027e2:	4603      	mov	r3, r0
 80027e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d052      	beq.n	8002892 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	e331      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d032      	beq.n	800285e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027f8:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4c      	ldr	r2, [pc, #304]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002804:	f7fe fd48 	bl	8001298 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800280c:	f7fe fd44 	bl	8001298 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e31a      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800281e:	4b44      	ldr	r3, [pc, #272]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a40      	ldr	r2, [pc, #256]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	493b      	ldr	r1, [pc, #236]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002848:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	4936      	ldr	r1, [pc, #216]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
 800285c:	e01a      	b.n	8002894 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800285e:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a33      	ldr	r2, [pc, #204]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800286a:	f7fe fd15 	bl	8001298 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002872:	f7fe fd11 	bl	8001298 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e2e7      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002884:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x1da>
 8002890:	e000      	b.n	8002894 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002892:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d074      	beq.n	800298a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x21a>
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d10e      	bne.n	80028ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d10b      	bne.n	80028ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b2:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d064      	beq.n	8002988 <HAL_RCC_OscConfig+0x2f0>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d160      	bne.n	8002988 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e2c4      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x24a>
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80028da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	e01d      	b.n	800291e <HAL_RCC_OscConfig+0x286>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ea:	d10c      	bne.n	8002906 <HAL_RCC_OscConfig+0x26e>
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80028f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x286>
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 800290c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_RCC_OscConfig+0x298>)
 8002918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01c      	beq.n	8002960 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002926:	f7fe fcb7 	bl	8001298 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292c:	e011      	b.n	8002952 <HAL_RCC_OscConfig+0x2ba>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	08005dc0 	.word	0x08005dc0
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe fcaa 	bl	8001298 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e280      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002952:	4baf      	ldr	r3, [pc, #700]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x2a8>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fc9a 	bl	8001298 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fc96 	bl	8001298 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e26c      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297a:	4ba5      	ldr	r3, [pc, #660]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x2d0>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d060      	beq.n	8002a58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_OscConfig+0x310>
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d119      	bne.n	80029d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d116      	bne.n	80029d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a8:	4b99      	ldr	r3, [pc, #612]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_OscConfig+0x328>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e249      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b93      	ldr	r3, [pc, #588]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	4990      	ldr	r1, [pc, #576]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d4:	e040      	b.n	8002a58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d023      	beq.n	8002a26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029de:	4b8c      	ldr	r3, [pc, #560]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a8b      	ldr	r2, [pc, #556]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fc55 	bl	8001298 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe fc51 	bl	8001298 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e227      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a04:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b7f      	ldr	r3, [pc, #508]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	497c      	ldr	r1, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
 8002a24:	e018      	b.n	8002a58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a79      	ldr	r2, [pc, #484]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7fe fc31 	bl	8001298 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3a:	f7fe fc2d 	bl	8001298 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e203      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a4c:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f0      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d03c      	beq.n	8002ade <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	4a67      	ldr	r2, [pc, #412]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fc0c 	bl	8001298 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a84:	f7fe fc08 	bl	8001298 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e1de      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a96:	4b5e      	ldr	r3, [pc, #376]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ef      	beq.n	8002a84 <HAL_RCC_OscConfig+0x3ec>
 8002aa4:	e01b      	b.n	8002ade <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fbef 	bl	8001298 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abe:	f7fe fbeb 	bl	8001298 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1c1      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad0:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ef      	bne.n	8002abe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80a6 	beq.w	8002c38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002af0:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10d      	bne.n	8002b18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	4a43      	ldr	r2, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6593      	str	r3, [r2, #88]	; 0x58
 8002b08:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b18:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <HAL_RCC_OscConfig+0x57c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d118      	bne.n	8002b56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b24:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_OscConfig+0x57c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a3a      	ldr	r2, [pc, #232]	; (8002c14 <HAL_RCC_OscConfig+0x57c>)
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b30:	f7fe fbb2 	bl	8001298 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b38:	f7fe fbae 	bl	8001298 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e184      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4a:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_RCC_OscConfig+0x57c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d108      	bne.n	8002b70 <HAL_RCC_OscConfig+0x4d8>
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	4a2a      	ldr	r2, [pc, #168]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b6e:	e024      	b.n	8002bba <HAL_RCC_OscConfig+0x522>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d110      	bne.n	8002b9a <HAL_RCC_OscConfig+0x502>
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b98:	e00f      	b.n	8002bba <HAL_RCC_OscConfig+0x522>
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002baa:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fb69 	bl	8001298 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fe fb65 	bl	8001298 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e139      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x578>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ed      	beq.n	8002bca <HAL_RCC_OscConfig+0x532>
 8002bee:	e01a      	b.n	8002c26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fb52 	bl	8001298 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf6:	e00f      	b.n	8002c18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fb4e 	bl	8001298 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d906      	bls.n	8002c18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e122      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c18:	4b90      	ldr	r3, [pc, #576]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e8      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c26:	7ffb      	ldrb	r3, [r7, #31]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2c:	4b8b      	ldr	r3, [pc, #556]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	4a8a      	ldr	r2, [pc, #552]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8108 	beq.w	8002e52 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	f040 80d0 	bne.w	8002dec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c4c:	4b83      	ldr	r3, [pc, #524]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d130      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d127      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d11f      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c8c:	2a07      	cmp	r2, #7
 8002c8e:	bf14      	ite	ne
 8002c90:	2201      	movne	r2, #1
 8002c92:	2200      	moveq	r2, #0
 8002c94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d113      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d06e      	beq.n	8002da0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d069      	beq.n	8002d9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cc8:	4b64      	ldr	r3, [pc, #400]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b7      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b5d      	ldr	r3, [pc, #372]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a5c      	ldr	r2, [pc, #368]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf0:	f7fe fad2 	bl	8001298 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe face 	bl	8001298 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0a4      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0a:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d16:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x7c8>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d26:	3a01      	subs	r2, #1
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d30:	0212      	lsls	r2, r2, #8
 8002d32:	4311      	orrs	r1, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d38:	0852      	lsrs	r2, r2, #1
 8002d3a:	3a01      	subs	r2, #1
 8002d3c:	0552      	lsls	r2, r2, #21
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d44:	0852      	lsrs	r2, r2, #1
 8002d46:	3a01      	subs	r2, #1
 8002d48:	0652      	lsls	r2, r2, #25
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d50:	0912      	lsrs	r2, r2, #4
 8002d52:	0452      	lsls	r2, r2, #17
 8002d54:	430a      	orrs	r2, r1
 8002d56:	4941      	ldr	r1, [pc, #260]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3e      	ldr	r2, [pc, #248]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d68:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d74:	f7fe fa90 	bl	8001298 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fa8c 	bl	8001298 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e062      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8e:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d9a:	e05a      	b.n	8002e52 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e059      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da0:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d152      	bne.n	8002e52 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db8:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dc4:	f7fe fa68 	bl	8001298 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fa64 	bl	8001298 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e03a      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x734>
 8002dea:	e032      	b.n	8002e52 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d02d      	beq.n	8002e4e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002df8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d105      	bne.n	8002e16 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002e10:	f023 0303 	bic.w	r3, r3, #3
 8002e14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002e1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fe fa37 	bl	8001298 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe fa33 	bl	8001298 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e009      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x7c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x796>
 8002e4c:	e001      	b.n	8002e52 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	f99d808c 	.word	0xf99d808c

08002e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0c8      	b.n	800300a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b66      	ldr	r3, [pc, #408]	; (8003014 <HAL_RCC_ClockConfig+0x1b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d910      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_ClockConfig+0x1b0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4961      	ldr	r1, [pc, #388]	; (8003014 <HAL_RCC_ClockConfig+0x1b0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b5f      	ldr	r3, [pc, #380]	; (8003014 <HAL_RCC_ClockConfig+0x1b0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b0      	b.n	800300a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d04c      	beq.n	8002f4e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebc:	4b56      	ldr	r3, [pc, #344]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d121      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e09e      	b.n	800300a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e092      	b.n	800300a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eec:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e086      	b.n	800300a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efc:	4b46      	ldr	r3, [pc, #280]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e07e      	b.n	800300a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f0c:	4b42      	ldr	r3, [pc, #264]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 0203 	bic.w	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	493f      	ldr	r1, [pc, #252]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1e:	f7fe f9bb 	bl	8001298 <HAL_GetTick>
 8002f22:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f26:	f7fe f9b7 	bl	8001298 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e066      	b.n	800300a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3c:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 020c 	and.w	r2, r3, #12
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d1eb      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	492c      	ldr	r1, [pc, #176]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_RCC_ClockConfig+0x1b0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d210      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_RCC_ClockConfig+0x1b0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 0207 	bic.w	r2, r3, #7
 8002f82:	4924      	ldr	r1, [pc, #144]	; (8003014 <HAL_RCC_ClockConfig+0x1b0>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x1b0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e036      	b.n	800300a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4918      	ldr	r1, [pc, #96]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4910      	ldr	r1, [pc, #64]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fda:	f000 f825 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	490c      	ldr	r1, [pc, #48]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	5ccb      	ldrb	r3, [r1, r3]
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe f8fa 	bl	80011f8 <HAL_InitTick>
 8003004:	4603      	mov	r3, r0
 8003006:	72fb      	strb	r3, [r7, #11]

  return status;
 8003008:	7afb      	ldrb	r3, [r7, #11]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40022000 	.word	0x40022000
 8003018:	40021000 	.word	0x40021000
 800301c:	08005dc0 	.word	0x08005dc0
 8003020:	20000000 	.word	0x20000000
 8003024:	20000004 	.word	0x20000004

08003028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003036:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003040:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x34>
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d121      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d11e      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800305c:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 800306a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003084:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10d      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030a0:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_RCC_GetSysClockFreq+0x110>)
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	e004      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030ac:	4b23      	ldr	r3, [pc, #140]	; (800313c <HAL_RCC_GetSysClockFreq+0x114>)
 80030ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d134      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030b6:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0xa6>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d003      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0xac>
 80030cc:	e005      	b.n	80030da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_RCC_GetSysClockFreq+0x110>)
 80030d0:	617b      	str	r3, [r7, #20]
      break;
 80030d2:	e005      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_GetSysClockFreq+0x114>)
 80030d6:	617b      	str	r3, [r7, #20]
      break;
 80030d8:	e002      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	617b      	str	r3, [r7, #20]
      break;
 80030de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	3301      	adds	r3, #1
 80030ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	fb02 f203 	mul.w	r2, r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	0e5b      	lsrs	r3, r3, #25
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	3301      	adds	r3, #1
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003120:	69bb      	ldr	r3, [r7, #24]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	08005dd8 	.word	0x08005dd8
 8003138:	00f42400 	.word	0x00f42400
 800313c:	007a1200 	.word	0x007a1200

08003140 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_GetHCLKFreq+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800315c:	f7ff fff0 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4904      	ldr	r1, [pc, #16]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	08005dd0 	.word	0x08005dd0

08003184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003188:	f7ff ffda 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0adb      	lsrs	r3, r3, #11
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4904      	ldr	r1, [pc, #16]	; (80031ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	08005dd0 	.word	0x08005dd0

080031b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031c8:	f7ff fa02 	bl	80025d0 <HAL_PWREx_GetVoltageRange>
 80031cc:	6178      	str	r0, [r7, #20]
 80031ce:	e014      	b.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031d0:	4b25      	ldr	r3, [pc, #148]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	4a24      	ldr	r2, [pc, #144]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031da:	6593      	str	r3, [r2, #88]	; 0x58
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031e8:	f7ff f9f2 	bl	80025d0 <HAL_PWREx_GetVoltageRange>
 80031ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003200:	d10b      	bne.n	800321a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d919      	bls.n	800323c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2ba0      	cmp	r3, #160	; 0xa0
 800320c:	d902      	bls.n	8003214 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800320e:	2302      	movs	r3, #2
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e013      	b.n	800323c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003214:	2301      	movs	r3, #1
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	e010      	b.n	800323c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d902      	bls.n	8003226 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003220:	2303      	movs	r3, #3
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	e00a      	b.n	800323c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b80      	cmp	r3, #128	; 0x80
 800322a:	d102      	bne.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800322c:	2302      	movs	r3, #2
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	e004      	b.n	800323c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b70      	cmp	r3, #112	; 0x70
 8003236:	d101      	bne.n	800323c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003238:	2301      	movs	r3, #1
 800323a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 0207 	bic.w	r2, r3, #7
 8003244:	4909      	ldr	r1, [pc, #36]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	429a      	cmp	r2, r3
 8003258:	d001      	beq.n	800325e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	40022000 	.word	0x40022000

08003270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003278:	2300      	movs	r3, #0
 800327a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800327c:	2300      	movs	r3, #0
 800327e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003288:	2b00      	cmp	r3, #0
 800328a:	d041      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003294:	d02a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003296:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800329a:	d824      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800329c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a6:	d81e      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b0:	d010      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032b2:	e018      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b4:	4b86      	ldr	r3, [pc, #536]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a85      	ldr	r2, [pc, #532]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c0:	e015      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 facb 	bl	8003864 <RCCEx_PLLSAI1_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d2:	e00c      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3320      	adds	r3, #32
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fbb6 	bl	8003a4c <RCCEx_PLLSAI2_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e4:	e003      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f4:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003302:	4973      	ldr	r1, [pc, #460]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800330a:	e001      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d041      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003320:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003324:	d02a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003326:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800332a:	d824      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800332c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003330:	d008      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003336:	d81e      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800333c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003340:	d010      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003342:	e018      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003344:	4b62      	ldr	r3, [pc, #392]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a61      	ldr	r2, [pc, #388]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003350:	e015      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3304      	adds	r3, #4
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fa83 	bl	8003864 <RCCEx_PLLSAI1_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003362:	e00c      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3320      	adds	r3, #32
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fb6e 	bl	8003a4c <RCCEx_PLLSAI2_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003374:	e003      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	74fb      	strb	r3, [r7, #19]
      break;
 800337a:	e000      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800337c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003384:	4b52      	ldr	r3, [pc, #328]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003392:	494f      	ldr	r1, [pc, #316]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800339a:	e001      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80a0 	beq.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	4a40      	ldr	r2, [pc, #256]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6593      	str	r3, [r2, #88]	; 0x58
 80033d4:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a3a      	ldr	r2, [pc, #232]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f0:	f7fd ff52 	bl	8001298 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033f6:	e009      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f8:	f7fd ff4e 	bl	8001298 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d902      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	74fb      	strb	r3, [r7, #19]
        break;
 800340a:	e005      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800340c:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ef      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d15c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800341e:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003428:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01f      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	d019      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800343c:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003446:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003448:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fd ff0d 	bl	8001298 <HAL_GetTick>
 800347e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003480:	e00b      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fd ff09 	bl	8001298 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d902      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	74fb      	strb	r3, [r7, #19]
            break;
 8003498:	e006      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ec      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034be:	4904      	ldr	r1, [pc, #16]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034c6:	e009      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
 80034cc:	e006      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034dc:	7c7b      	ldrb	r3, [r7, #17]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b9e      	ldr	r3, [pc, #632]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	4a9d      	ldr	r2, [pc, #628]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034fa:	4b98      	ldr	r3, [pc, #608]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	f023 0203 	bic.w	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	4994      	ldr	r1, [pc, #592]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800351c:	4b8f      	ldr	r3, [pc, #572]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f023 020c 	bic.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	498c      	ldr	r1, [pc, #560]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800353e:	4b87      	ldr	r3, [pc, #540]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	4983      	ldr	r1, [pc, #524]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003560:	4b7e      	ldr	r3, [pc, #504]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	497b      	ldr	r1, [pc, #492]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003590:	4972      	ldr	r1, [pc, #456]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a4:	4b6d      	ldr	r3, [pc, #436]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	496a      	ldr	r1, [pc, #424]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	4961      	ldr	r1, [pc, #388]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e8:	4b5c      	ldr	r3, [pc, #368]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f6:	4959      	ldr	r1, [pc, #356]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800360a:	4b54      	ldr	r3, [pc, #336]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	4950      	ldr	r1, [pc, #320]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800362c:	4b4b      	ldr	r3, [pc, #300]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	4948      	ldr	r1, [pc, #288]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800364e:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	493f      	ldr	r1, [pc, #252]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d028      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367e:	4937      	ldr	r1, [pc, #220]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368e:	d106      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a31      	ldr	r2, [pc, #196]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369a:	60d3      	str	r3, [r2, #12]
 800369c:	e011      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f8d8 	bl	8003864 <RCCEx_PLLSAI1_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d028      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	491f      	ldr	r1, [pc, #124]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ec:	d106      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	4a1a      	ldr	r2, [pc, #104]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f8:	60d3      	str	r3, [r2, #12]
 80036fa:	e011      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003704:	d10c      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	2101      	movs	r1, #1
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f8a9 	bl	8003864 <RCCEx_PLLSAI1_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02b      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374a:	d109      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a02      	ldr	r2, [pc, #8]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003756:	60d3      	str	r3, [r2, #12]
 8003758:	e014      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003768:	d10c      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f877 	bl	8003864 <RCCEx_PLLSAI1_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d02f      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379e:	4928      	ldr	r1, [pc, #160]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ae:	d10d      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2102      	movs	r1, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f854 	bl	8003864 <RCCEx_PLLSAI1_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d014      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	74bb      	strb	r3, [r7, #18]
 80037ca:	e011      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3320      	adds	r3, #32
 80037da:	2102      	movs	r1, #2
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f935 	bl	8003a4c <RCCEx_PLLSAI2_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e6:	7cfb      	ldrb	r3, [r7, #19]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380a:	490d      	ldr	r1, [pc, #52]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800382e:	4904      	ldr	r1, [pc, #16]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003836:	7cbb      	ldrb	r3, [r7, #18]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000

08003844 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800384e:	f043 0304 	orr.w	r3, r3, #4
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000

08003864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003872:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d018      	beq.n	80038b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800387e:	4b72      	ldr	r3, [pc, #456]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0203 	and.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d10d      	bne.n	80038aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
       ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003896:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
       ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d047      	beq.n	800393a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
 80038ae:	e044      	b.n	800393a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d018      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x86>
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d825      	bhi.n	8003908 <RCCEx_PLLSAI1_Config+0xa4>
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d002      	beq.n	80038c6 <RCCEx_PLLSAI1_Config+0x62>
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d009      	beq.n	80038d8 <RCCEx_PLLSAI1_Config+0x74>
 80038c4:	e020      	b.n	8003908 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038c6:	4b60      	ldr	r3, [pc, #384]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11d      	bne.n	800390e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d6:	e01a      	b.n	800390e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038d8:	4b5b      	ldr	r3, [pc, #364]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d116      	bne.n	8003912 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e8:	e013      	b.n	8003912 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ea:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003906:	e006      	b.n	8003916 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	e004      	b.n	8003918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800390e:	bf00      	nop
 8003910:	e002      	b.n	8003918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003916:	bf00      	nop
    }

    if(status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10d      	bne.n	800393a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800391e:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6819      	ldr	r1, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	430b      	orrs	r3, r1
 8003934:	4944      	ldr	r1, [pc, #272]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d17d      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003940:	4b41      	ldr	r3, [pc, #260]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800394a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394c:	f7fd fca4 	bl	8001298 <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003952:	e009      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003954:	f7fd fca0 	bl	8001298 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	73fb      	strb	r3, [r7, #15]
        break;
 8003966:	e005      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003968:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ef      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d160      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d111      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003980:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6892      	ldr	r2, [r2, #8]
 8003990:	0211      	lsls	r1, r2, #8
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68d2      	ldr	r2, [r2, #12]
 8003996:	0912      	lsrs	r2, r2, #4
 8003998:	0452      	lsls	r2, r2, #17
 800399a:	430a      	orrs	r2, r1
 800399c:	492a      	ldr	r1, [pc, #168]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	610b      	str	r3, [r1, #16]
 80039a2:	e027      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d112      	bne.n	80039d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6892      	ldr	r2, [r2, #8]
 80039ba:	0211      	lsls	r1, r2, #8
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6912      	ldr	r2, [r2, #16]
 80039c0:	0852      	lsrs	r2, r2, #1
 80039c2:	3a01      	subs	r2, #1
 80039c4:	0552      	lsls	r2, r2, #21
 80039c6:	430a      	orrs	r2, r1
 80039c8:	491f      	ldr	r1, [pc, #124]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	610b      	str	r3, [r1, #16]
 80039ce:	e011      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6892      	ldr	r2, [r2, #8]
 80039e0:	0211      	lsls	r1, r2, #8
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6952      	ldr	r2, [r2, #20]
 80039e6:	0852      	lsrs	r2, r2, #1
 80039e8:	3a01      	subs	r2, #1
 80039ea:	0652      	lsls	r2, r2, #25
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4916      	ldr	r1, [pc, #88]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fd fc4a 	bl	8001298 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a06:	e009      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a08:	f7fd fc46 	bl	8001298 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d902      	bls.n	8003a1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	73fb      	strb	r3, [r7, #15]
          break;
 8003a1a:	e005      	b.n	8003a28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ef      	beq.n	8003a08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	4904      	ldr	r1, [pc, #16]	; (8003a48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000

08003a4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a5a:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d018      	beq.n	8003a98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a66:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0203 	and.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d10d      	bne.n	8003a92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
       ||
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a7e:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d047      	beq.n	8003b22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	e044      	b.n	8003b22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d018      	beq.n	8003ad2 <RCCEx_PLLSAI2_Config+0x86>
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d825      	bhi.n	8003af0 <RCCEx_PLLSAI2_Config+0xa4>
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d002      	beq.n	8003aae <RCCEx_PLLSAI2_Config+0x62>
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d009      	beq.n	8003ac0 <RCCEx_PLLSAI2_Config+0x74>
 8003aac:	e020      	b.n	8003af0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aae:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11d      	bne.n	8003af6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abe:	e01a      	b.n	8003af6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ac0:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d116      	bne.n	8003afa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad0:	e013      	b.n	8003afa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ad2:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ade:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aee:	e006      	b.n	8003afe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      break;
 8003af4:	e004      	b.n	8003b00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003afe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10d      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b06:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	4939      	ldr	r1, [pc, #228]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d167      	bne.n	8003bf8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b28:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a35      	ldr	r2, [pc, #212]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b34:	f7fd fbb0 	bl	8001298 <HAL_GetTick>
 8003b38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b3a:	e009      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b3c:	f7fd fbac 	bl	8001298 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d902      	bls.n	8003b50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b4e:	e005      	b.n	8003b5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ef      	bne.n	8003b3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d14a      	bne.n	8003bf8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d111      	bne.n	8003b8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b68:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6892      	ldr	r2, [r2, #8]
 8003b78:	0211      	lsls	r1, r2, #8
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68d2      	ldr	r2, [r2, #12]
 8003b7e:	0912      	lsrs	r2, r2, #4
 8003b80:	0452      	lsls	r2, r2, #17
 8003b82:	430a      	orrs	r2, r1
 8003b84:	491f      	ldr	r1, [pc, #124]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	614b      	str	r3, [r1, #20]
 8003b8a:	e011      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6892      	ldr	r2, [r2, #8]
 8003b9c:	0211      	lsls	r1, r2, #8
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6912      	ldr	r2, [r2, #16]
 8003ba2:	0852      	lsrs	r2, r2, #1
 8003ba4:	3a01      	subs	r2, #1
 8003ba6:	0652      	lsls	r2, r2, #25
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	4916      	ldr	r1, [pc, #88]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd fb6c 	bl	8001298 <HAL_GetTick>
 8003bc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bc2:	e009      	b.n	8003bd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bc4:	f7fd fb68 	bl	8001298 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d902      	bls.n	8003bd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	73fb      	strb	r3, [r7, #15]
          break;
 8003bd6:	e005      	b.n	8003be4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ef      	beq.n	8003bc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	4904      	ldr	r1, [pc, #16]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000

08003c08 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d06c      	beq.n	8003cf4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd f986 	bl	8000f40 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	22ca      	movs	r2, #202	; 0xca
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2253      	movs	r2, #83	; 0x53
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f87c 	bl	8003d4a <RTC_EnterInitMode>
 8003c52:	4603      	mov	r3, r0
 8003c54:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d14b      	bne.n	8003cf4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6899      	ldr	r1, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6919      	ldr	r1, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	041a      	lsls	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f87f 	bl	8003db0 <RTC_ExitInitMode>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11b      	bne.n	8003cf4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0203 	bic.w	r2, r2, #3
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d14:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003d16:	f7fd fabf 	bl	8001298 <HAL_GetTick>
 8003d1a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d1c:	e009      	b.n	8003d32 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d1e:	f7fd fabb 	bl	8001298 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d2c:	d901      	bls.n	8003d32 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e007      	b.n	8003d42 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ee      	beq.n	8003d1e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d120      	bne.n	8003da6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d6e:	f7fd fa93 	bl	8001298 <HAL_GetTick>
 8003d72:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d74:	e00d      	b.n	8003d92 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d76:	f7fd fa8f 	bl	8001298 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d84:	d905      	bls.n	8003d92 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <RTC_EnterInitMode+0x5c>
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d1e7      	bne.n	8003d76 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <RTC_ExitInitMode+0x78>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <RTC_ExitInitMode+0x78>)
 8003dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <RTC_ExitInitMode+0x78>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10c      	bne.n	8003dee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff92 	bl	8003cfe <HAL_RTC_WaitForSynchro>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01e      	beq.n	8003e1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2203      	movs	r2, #3
 8003de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e017      	b.n	8003e1e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <RTC_ExitInitMode+0x78>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4a0d      	ldr	r2, [pc, #52]	; (8003e28 <RTC_ExitInitMode+0x78>)
 8003df4:	f023 0320 	bic.w	r3, r3, #32
 8003df8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff7f 	bl	8003cfe <HAL_RTC_WaitForSynchro>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <RTC_ExitInitMode+0x78>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <RTC_ExitInitMode+0x78>)
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40002800 	.word	0x40002800

08003e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e040      	b.n	8003ec0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd f8a8 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fc18 	bl	80046a0 <UART_SetConfig>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e022      	b.n	8003ec0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fe96 	bl	8004bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 ff1d 	bl	8004cf8 <UART_CheckIdleState>
 8003ebe:	4603      	mov	r3, r0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	f040 8082 	bne.w	8003fe6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_UART_Transmit+0x26>
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07a      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_UART_Transmit+0x38>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e073      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2221      	movs	r2, #33	; 0x21
 8003f14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f16:	f7fd f9bf 	bl	8001298 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d108      	bne.n	8003f48 <HAL_UART_Transmit+0x80>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e003      	b.n	8003f50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f58:	e02d      	b.n	8003fb6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 ff10 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e039      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f86:	b292      	uxth	r2, r2
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e008      	b.n	8003fa4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1cb      	bne.n	8003f5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2140      	movs	r1, #64	; 0x40
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fedc 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e005      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	2b20      	cmp	r3, #32
 8004004:	d142      	bne.n	800408c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_UART_Receive_IT+0x22>
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e03b      	b.n	800408e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_UART_Receive_IT+0x34>
 8004020:	2302      	movs	r3, #2
 8004022:	e034      	b.n	800408e <HAL_UART_Receive_IT+0x9e>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_UART_Receive_IT+0xa8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d01f      	beq.n	800407c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	613b      	str	r3, [r7, #16]
   return(result);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	6a3a      	ldr	r2, [r7, #32]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	61bb      	str	r3, [r7, #24]
   return(result);
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e6      	bne.n	800404a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	461a      	mov	r2, r3
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 ff46 	bl	8004f14 <UART_Start_Receive_IT>
 8004088:	4603      	mov	r3, r0
 800408a:	e000      	b.n	800408e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3728      	adds	r7, #40	; 0x28
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40008000 	.word	0x40008000

0800409c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b0ba      	sub	sp, #232	; 0xe8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80040ca:	4013      	ands	r3, r2
 80040cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80040d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d115      	bne.n	8004104 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00f      	beq.n	8004104 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 82a6 	beq.w	8004646 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
      }
      return;
 8004102:	e2a0      	b.n	8004646 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8117 	beq.w	800433c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800410e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800411a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800411e:	4b85      	ldr	r3, [pc, #532]	; (8004334 <HAL_UART_IRQHandler+0x298>)
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 810a 	beq.w	800433c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d011      	beq.n	8004158 <HAL_UART_IRQHandler+0xbc>
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d011      	beq.n	8004188 <HAL_UART_IRQHandler+0xec>
 8004164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2202      	movs	r2, #2
 8004176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417e:	f043 0204 	orr.w	r2, r3, #4
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d011      	beq.n	80041b8 <HAL_UART_IRQHandler+0x11c>
 8004194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2204      	movs	r2, #4
 80041a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ae:	f043 0202 	orr.w	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d017      	beq.n	80041f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2208      	movs	r2, #8
 80041e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d012      	beq.n	8004226 <HAL_UART_IRQHandler+0x18a>
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00c      	beq.n	8004226 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 820c 	beq.w	800464a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800423e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d005      	beq.n	800427e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004276:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800427a:	2b00      	cmp	r3, #0
 800427c:	d04f      	beq.n	800431e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 ff12 	bl	80050a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d141      	bne.n	8004316 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1d9      	bne.n	8004292 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d013      	beq.n	800430e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a13      	ldr	r2, [pc, #76]	; (8004338 <HAL_UART_IRQHandler+0x29c>)
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd f92b 	bl	800154e <HAL_DMA_Abort_IT>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d017      	beq.n	800432e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004308:	4610      	mov	r0, r2
 800430a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	e00f      	b.n	800432e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f9b0 	bl	8004674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004314:	e00b      	b.n	800432e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9ac 	bl	8004674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	e007      	b.n	800432e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9a8 	bl	8004674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800432c:	e18d      	b.n	800464a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432e:	bf00      	nop
    return;
 8004330:	e18b      	b.n	800464a <HAL_UART_IRQHandler+0x5ae>
 8004332:	bf00      	nop
 8004334:	04000120 	.word	0x04000120
 8004338:	0800516f 	.word	0x0800516f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004340:	2b01      	cmp	r3, #1
 8004342:	f040 8146 	bne.w	80045d2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 813f 	beq.w	80045d2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8138 	beq.w	80045d2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2210      	movs	r2, #16
 8004368:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	f040 80b4 	bne.w	80044e2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004386:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 815f 	beq.w	800464e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800439a:	429a      	cmp	r2, r3
 800439c:	f080 8157 	bcs.w	800464e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f040 8085 	bne.w	80044c6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1da      	bne.n	80043bc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800442a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800442e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004432:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800443c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e1      	bne.n	8004406 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3308      	adds	r3, #8
 8004448:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004468:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800446c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e3      	bne.n	8004442 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004496:	f023 0310 	bic.w	r3, r3, #16
 800449a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80044aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e4      	bne.n	8004486 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fd f806 	bl	80014d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8d4 	bl	8004688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044e0:	e0b5      	b.n	800464e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a7 	beq.w	8004652 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80a2 	beq.w	8004652 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800451c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004522:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004530:	647b      	str	r3, [r7, #68]	; 0x44
 8004532:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800453e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e4      	bne.n	800450e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	623b      	str	r3, [r7, #32]
   return(result);
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3308      	adds	r3, #8
 8004564:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004568:	633a      	str	r2, [r7, #48]	; 0x30
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800456e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e3      	bne.n	8004544 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	60fb      	str	r3, [r7, #12]
   return(result);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0310 	bic.w	r3, r3, #16
 80045a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	617b      	str	r3, [r7, #20]
   return(result);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e4      	bne.n	800458e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f85c 	bl	8004688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045d0:	e03f      	b.n	8004652 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00e      	beq.n	80045fc <HAL_UART_IRQHandler+0x560>
 80045de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 ff5a 	bl	80054ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045fa:	e02d      	b.n	8004658 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00e      	beq.n	8004626 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01c      	beq.n	8004656 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
    }
    return;
 8004624:	e017      	b.n	8004656 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d012      	beq.n	8004658 <HAL_UART_IRQHandler+0x5bc>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fdab 	bl	800519a <UART_EndTransmit_IT>
    return;
 8004644:	e008      	b.n	8004658 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004646:	bf00      	nop
 8004648:	e006      	b.n	8004658 <HAL_UART_IRQHandler+0x5bc>
    return;
 800464a:	bf00      	nop
 800464c:	e004      	b.n	8004658 <HAL_UART_IRQHandler+0x5bc>
      return;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004656:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004658:	37e8      	adds	r7, #232	; 0xe8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop

08004660 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4bad      	ldr	r3, [pc, #692]	; (8004980 <UART_SetConfig+0x2e0>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	69f9      	ldr	r1, [r7, #28]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4aa2      	ldr	r2, [pc, #648]	; (8004984 <UART_SetConfig+0x2e4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	4313      	orrs	r3, r2
 8004706:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a99      	ldr	r2, [pc, #612]	; (8004988 <UART_SetConfig+0x2e8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d121      	bne.n	800476a <UART_SetConfig+0xca>
 8004726:	4b99      	ldr	r3, [pc, #612]	; (800498c <UART_SetConfig+0x2ec>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b03      	cmp	r3, #3
 8004732:	d817      	bhi.n	8004764 <UART_SetConfig+0xc4>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <UART_SetConfig+0x9c>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	0800474d 	.word	0x0800474d
 8004740:	08004759 	.word	0x08004759
 8004744:	08004753 	.word	0x08004753
 8004748:	0800475f 	.word	0x0800475f
 800474c:	2301      	movs	r3, #1
 800474e:	76fb      	strb	r3, [r7, #27]
 8004750:	e0e7      	b.n	8004922 <UART_SetConfig+0x282>
 8004752:	2302      	movs	r3, #2
 8004754:	76fb      	strb	r3, [r7, #27]
 8004756:	e0e4      	b.n	8004922 <UART_SetConfig+0x282>
 8004758:	2304      	movs	r3, #4
 800475a:	76fb      	strb	r3, [r7, #27]
 800475c:	e0e1      	b.n	8004922 <UART_SetConfig+0x282>
 800475e:	2308      	movs	r3, #8
 8004760:	76fb      	strb	r3, [r7, #27]
 8004762:	e0de      	b.n	8004922 <UART_SetConfig+0x282>
 8004764:	2310      	movs	r3, #16
 8004766:	76fb      	strb	r3, [r7, #27]
 8004768:	e0db      	b.n	8004922 <UART_SetConfig+0x282>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a88      	ldr	r2, [pc, #544]	; (8004990 <UART_SetConfig+0x2f0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d132      	bne.n	80047da <UART_SetConfig+0x13a>
 8004774:	4b85      	ldr	r3, [pc, #532]	; (800498c <UART_SetConfig+0x2ec>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d828      	bhi.n	80047d4 <UART_SetConfig+0x134>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <UART_SetConfig+0xe8>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080047d5 	.word	0x080047d5
 8004790:	080047d5 	.word	0x080047d5
 8004794:	080047d5 	.word	0x080047d5
 8004798:	080047c9 	.word	0x080047c9
 800479c:	080047d5 	.word	0x080047d5
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080047d5 	.word	0x080047d5
 80047a8:	080047c3 	.word	0x080047c3
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047d5 	.word	0x080047d5
 80047b8:	080047cf 	.word	0x080047cf
 80047bc:	2300      	movs	r3, #0
 80047be:	76fb      	strb	r3, [r7, #27]
 80047c0:	e0af      	b.n	8004922 <UART_SetConfig+0x282>
 80047c2:	2302      	movs	r3, #2
 80047c4:	76fb      	strb	r3, [r7, #27]
 80047c6:	e0ac      	b.n	8004922 <UART_SetConfig+0x282>
 80047c8:	2304      	movs	r3, #4
 80047ca:	76fb      	strb	r3, [r7, #27]
 80047cc:	e0a9      	b.n	8004922 <UART_SetConfig+0x282>
 80047ce:	2308      	movs	r3, #8
 80047d0:	76fb      	strb	r3, [r7, #27]
 80047d2:	e0a6      	b.n	8004922 <UART_SetConfig+0x282>
 80047d4:	2310      	movs	r3, #16
 80047d6:	76fb      	strb	r3, [r7, #27]
 80047d8:	e0a3      	b.n	8004922 <UART_SetConfig+0x282>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6d      	ldr	r2, [pc, #436]	; (8004994 <UART_SetConfig+0x2f4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d120      	bne.n	8004826 <UART_SetConfig+0x186>
 80047e4:	4b69      	ldr	r3, [pc, #420]	; (800498c <UART_SetConfig+0x2ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ee:	2b30      	cmp	r3, #48	; 0x30
 80047f0:	d013      	beq.n	800481a <UART_SetConfig+0x17a>
 80047f2:	2b30      	cmp	r3, #48	; 0x30
 80047f4:	d814      	bhi.n	8004820 <UART_SetConfig+0x180>
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d009      	beq.n	800480e <UART_SetConfig+0x16e>
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d810      	bhi.n	8004820 <UART_SetConfig+0x180>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <UART_SetConfig+0x168>
 8004802:	2b10      	cmp	r3, #16
 8004804:	d006      	beq.n	8004814 <UART_SetConfig+0x174>
 8004806:	e00b      	b.n	8004820 <UART_SetConfig+0x180>
 8004808:	2300      	movs	r3, #0
 800480a:	76fb      	strb	r3, [r7, #27]
 800480c:	e089      	b.n	8004922 <UART_SetConfig+0x282>
 800480e:	2302      	movs	r3, #2
 8004810:	76fb      	strb	r3, [r7, #27]
 8004812:	e086      	b.n	8004922 <UART_SetConfig+0x282>
 8004814:	2304      	movs	r3, #4
 8004816:	76fb      	strb	r3, [r7, #27]
 8004818:	e083      	b.n	8004922 <UART_SetConfig+0x282>
 800481a:	2308      	movs	r3, #8
 800481c:	76fb      	strb	r3, [r7, #27]
 800481e:	e080      	b.n	8004922 <UART_SetConfig+0x282>
 8004820:	2310      	movs	r3, #16
 8004822:	76fb      	strb	r3, [r7, #27]
 8004824:	e07d      	b.n	8004922 <UART_SetConfig+0x282>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a5b      	ldr	r2, [pc, #364]	; (8004998 <UART_SetConfig+0x2f8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d120      	bne.n	8004872 <UART_SetConfig+0x1d2>
 8004830:	4b56      	ldr	r3, [pc, #344]	; (800498c <UART_SetConfig+0x2ec>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800483a:	2bc0      	cmp	r3, #192	; 0xc0
 800483c:	d013      	beq.n	8004866 <UART_SetConfig+0x1c6>
 800483e:	2bc0      	cmp	r3, #192	; 0xc0
 8004840:	d814      	bhi.n	800486c <UART_SetConfig+0x1cc>
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d009      	beq.n	800485a <UART_SetConfig+0x1ba>
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d810      	bhi.n	800486c <UART_SetConfig+0x1cc>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <UART_SetConfig+0x1b4>
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d006      	beq.n	8004860 <UART_SetConfig+0x1c0>
 8004852:	e00b      	b.n	800486c <UART_SetConfig+0x1cc>
 8004854:	2300      	movs	r3, #0
 8004856:	76fb      	strb	r3, [r7, #27]
 8004858:	e063      	b.n	8004922 <UART_SetConfig+0x282>
 800485a:	2302      	movs	r3, #2
 800485c:	76fb      	strb	r3, [r7, #27]
 800485e:	e060      	b.n	8004922 <UART_SetConfig+0x282>
 8004860:	2304      	movs	r3, #4
 8004862:	76fb      	strb	r3, [r7, #27]
 8004864:	e05d      	b.n	8004922 <UART_SetConfig+0x282>
 8004866:	2308      	movs	r3, #8
 8004868:	76fb      	strb	r3, [r7, #27]
 800486a:	e05a      	b.n	8004922 <UART_SetConfig+0x282>
 800486c:	2310      	movs	r3, #16
 800486e:	76fb      	strb	r3, [r7, #27]
 8004870:	e057      	b.n	8004922 <UART_SetConfig+0x282>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a49      	ldr	r2, [pc, #292]	; (800499c <UART_SetConfig+0x2fc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d125      	bne.n	80048c8 <UART_SetConfig+0x228>
 800487c:	4b43      	ldr	r3, [pc, #268]	; (800498c <UART_SetConfig+0x2ec>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800488a:	d017      	beq.n	80048bc <UART_SetConfig+0x21c>
 800488c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004890:	d817      	bhi.n	80048c2 <UART_SetConfig+0x222>
 8004892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004896:	d00b      	beq.n	80048b0 <UART_SetConfig+0x210>
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	d811      	bhi.n	80048c2 <UART_SetConfig+0x222>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <UART_SetConfig+0x20a>
 80048a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a6:	d006      	beq.n	80048b6 <UART_SetConfig+0x216>
 80048a8:	e00b      	b.n	80048c2 <UART_SetConfig+0x222>
 80048aa:	2300      	movs	r3, #0
 80048ac:	76fb      	strb	r3, [r7, #27]
 80048ae:	e038      	b.n	8004922 <UART_SetConfig+0x282>
 80048b0:	2302      	movs	r3, #2
 80048b2:	76fb      	strb	r3, [r7, #27]
 80048b4:	e035      	b.n	8004922 <UART_SetConfig+0x282>
 80048b6:	2304      	movs	r3, #4
 80048b8:	76fb      	strb	r3, [r7, #27]
 80048ba:	e032      	b.n	8004922 <UART_SetConfig+0x282>
 80048bc:	2308      	movs	r3, #8
 80048be:	76fb      	strb	r3, [r7, #27]
 80048c0:	e02f      	b.n	8004922 <UART_SetConfig+0x282>
 80048c2:	2310      	movs	r3, #16
 80048c4:	76fb      	strb	r3, [r7, #27]
 80048c6:	e02c      	b.n	8004922 <UART_SetConfig+0x282>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2d      	ldr	r2, [pc, #180]	; (8004984 <UART_SetConfig+0x2e4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d125      	bne.n	800491e <UART_SetConfig+0x27e>
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <UART_SetConfig+0x2ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048e0:	d017      	beq.n	8004912 <UART_SetConfig+0x272>
 80048e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048e6:	d817      	bhi.n	8004918 <UART_SetConfig+0x278>
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ec:	d00b      	beq.n	8004906 <UART_SetConfig+0x266>
 80048ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f2:	d811      	bhi.n	8004918 <UART_SetConfig+0x278>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <UART_SetConfig+0x260>
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fc:	d006      	beq.n	800490c <UART_SetConfig+0x26c>
 80048fe:	e00b      	b.n	8004918 <UART_SetConfig+0x278>
 8004900:	2300      	movs	r3, #0
 8004902:	76fb      	strb	r3, [r7, #27]
 8004904:	e00d      	b.n	8004922 <UART_SetConfig+0x282>
 8004906:	2302      	movs	r3, #2
 8004908:	76fb      	strb	r3, [r7, #27]
 800490a:	e00a      	b.n	8004922 <UART_SetConfig+0x282>
 800490c:	2304      	movs	r3, #4
 800490e:	76fb      	strb	r3, [r7, #27]
 8004910:	e007      	b.n	8004922 <UART_SetConfig+0x282>
 8004912:	2308      	movs	r3, #8
 8004914:	76fb      	strb	r3, [r7, #27]
 8004916:	e004      	b.n	8004922 <UART_SetConfig+0x282>
 8004918:	2310      	movs	r3, #16
 800491a:	76fb      	strb	r3, [r7, #27]
 800491c:	e001      	b.n	8004922 <UART_SetConfig+0x282>
 800491e:	2310      	movs	r3, #16
 8004920:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a17      	ldr	r2, [pc, #92]	; (8004984 <UART_SetConfig+0x2e4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	f040 8087 	bne.w	8004a3c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800492e:	7efb      	ldrb	r3, [r7, #27]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d837      	bhi.n	80049a4 <UART_SetConfig+0x304>
 8004934:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x29c>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	08004961 	.word	0x08004961
 8004940:	080049a5 	.word	0x080049a5
 8004944:	08004969 	.word	0x08004969
 8004948:	080049a5 	.word	0x080049a5
 800494c:	0800496f 	.word	0x0800496f
 8004950:	080049a5 	.word	0x080049a5
 8004954:	080049a5 	.word	0x080049a5
 8004958:	080049a5 	.word	0x080049a5
 800495c:	08004977 	.word	0x08004977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fe fbfa 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8004964:	6178      	str	r0, [r7, #20]
        break;
 8004966:	e022      	b.n	80049ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <UART_SetConfig+0x300>)
 800496a:	617b      	str	r3, [r7, #20]
        break;
 800496c:	e01f      	b.n	80049ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496e:	f7fe fb5b 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8004972:	6178      	str	r0, [r7, #20]
        break;
 8004974:	e01b      	b.n	80049ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497a:	617b      	str	r3, [r7, #20]
        break;
 800497c:	e017      	b.n	80049ae <UART_SetConfig+0x30e>
 800497e:	bf00      	nop
 8004980:	efff69f3 	.word	0xefff69f3
 8004984:	40008000 	.word	0x40008000
 8004988:	40013800 	.word	0x40013800
 800498c:	40021000 	.word	0x40021000
 8004990:	40004400 	.word	0x40004400
 8004994:	40004800 	.word	0x40004800
 8004998:	40004c00 	.word	0x40004c00
 800499c:	40005000 	.word	0x40005000
 80049a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	76bb      	strb	r3, [r7, #26]
        break;
 80049ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80f1 	beq.w	8004b98 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	4413      	add	r3, r2
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d305      	bcc.n	80049d2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d902      	bls.n	80049d8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	76bb      	strb	r3, [r7, #26]
 80049d6:	e0df      	b.n	8004b98 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	4618      	mov	r0, r3
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	020b      	lsls	r3, r1, #8
 80049ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049ee:	0202      	lsls	r2, r0, #8
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	6849      	ldr	r1, [r1, #4]
 80049f4:	0849      	lsrs	r1, r1, #1
 80049f6:	4608      	mov	r0, r1
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	1814      	adds	r4, r2, r0
 80049fe:	eb43 0501 	adc.w	r5, r3, r1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fc36 	bl	8000280 <__aeabi_uldivmod>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4613      	mov	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a22:	d308      	bcc.n	8004a36 <UART_SetConfig+0x396>
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2a:	d204      	bcs.n	8004a36 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	60da      	str	r2, [r3, #12]
 8004a34:	e0b0      	b.n	8004b98 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	76bb      	strb	r3, [r7, #26]
 8004a3a:	e0ad      	b.n	8004b98 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	d15b      	bne.n	8004afe <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004a46:	7efb      	ldrb	r3, [r7, #27]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x3fe>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x3b4>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe fb6e 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	6178      	str	r0, [r7, #20]
        break;
 8004a7e:	e013      	b.n	8004aa8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe fb80 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 8004a84:	6178      	str	r0, [r7, #20]
        break;
 8004a86:	e00f      	b.n	8004aa8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b49      	ldr	r3, [pc, #292]	; (8004bb0 <UART_SetConfig+0x510>)
 8004a8a:	617b      	str	r3, [r7, #20]
        break;
 8004a8c:	e00c      	b.n	8004aa8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fe facb 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8004a92:	6178      	str	r0, [r7, #20]
        break;
 8004a94:	e008      	b.n	8004aa8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	617b      	str	r3, [r7, #20]
        break;
 8004a9c:	e004      	b.n	8004aa8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	76bb      	strb	r3, [r7, #26]
        break;
 8004aa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d074      	beq.n	8004b98 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	005a      	lsls	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	d916      	bls.n	8004af8 <UART_SetConfig+0x458>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d212      	bcs.n	8004af8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f023 030f 	bic.w	r3, r3, #15
 8004ada:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	89fb      	ldrh	r3, [r7, #14]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	89fa      	ldrh	r2, [r7, #14]
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e04f      	b.n	8004b98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	76bb      	strb	r3, [r7, #26]
 8004afc:	e04c      	b.n	8004b98 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afe:	7efb      	ldrb	r3, [r7, #27]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d828      	bhi.n	8004b56 <UART_SetConfig+0x4b6>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x46c>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe fb12 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8004b34:	6178      	str	r0, [r7, #20]
        break;
 8004b36:	e013      	b.n	8004b60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe fb24 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	6178      	str	r0, [r7, #20]
        break;
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <UART_SetConfig+0x510>)
 8004b42:	617b      	str	r3, [r7, #20]
        break;
 8004b44:	e00c      	b.n	8004b60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fe fa6f 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8004b4a:	6178      	str	r0, [r7, #20]
        break;
 8004b4c:	e008      	b.n	8004b60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	617b      	str	r3, [r7, #20]
        break;
 8004b54:	e004      	b.n	8004b60 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	76bb      	strb	r3, [r7, #26]
        break;
 8004b5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085a      	lsrs	r2, r3, #1
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b0f      	cmp	r3, #15
 8004b7e:	d909      	bls.n	8004b94 <UART_SetConfig+0x4f4>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b86:	d205      	bcs.n	8004b94 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e001      	b.n	8004b98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ba4:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bdb0      	pop	{r4, r5, r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	00f42400 	.word	0x00f42400

08004bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01a      	beq.n	8004cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb2:	d10a      	bne.n	8004cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d08:	f7fc fac6 	bl	8001298 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d10e      	bne.n	8004d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f82d 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e023      	b.n	8004d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d10e      	bne.n	8004d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f817 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e00d      	b.n	8004d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b09c      	sub	sp, #112	; 0x70
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	e0a5      	b.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	f000 80a1 	beq.w	8004ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fc fa77 	bl	8001298 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8004db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d13e      	bne.n	8004e3a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ddc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e6      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	663b      	str	r3, [r7, #96]	; 0x60
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e067      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d04f      	beq.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e56:	d147      	bne.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e60:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
 8004e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e6      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eb4:	623a      	str	r2, [r7, #32]
 8004eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	69f9      	ldr	r1, [r7, #28]
 8004eba:	6a3a      	ldr	r2, [r7, #32]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e010      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	f43f af4a 	beq.w	8004d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3770      	adds	r7, #112	; 0x70
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b097      	sub	sp, #92	; 0x5c
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f46:	d10e      	bne.n	8004f66 <UART_Start_Receive_IT+0x52>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <UART_Start_Receive_IT+0x48>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f5a:	e02d      	b.n	8004fb8 <UART_Start_Receive_IT+0xa4>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	22ff      	movs	r2, #255	; 0xff
 8004f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f64:	e028      	b.n	8004fb8 <UART_Start_Receive_IT+0xa4>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10d      	bne.n	8004f8a <UART_Start_Receive_IT+0x76>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <UART_Start_Receive_IT+0x6c>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f7e:	e01b      	b.n	8004fb8 <UART_Start_Receive_IT+0xa4>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	227f      	movs	r2, #127	; 0x7f
 8004f84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f88:	e016      	b.n	8004fb8 <UART_Start_Receive_IT+0xa4>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f92:	d10d      	bne.n	8004fb0 <UART_Start_Receive_IT+0x9c>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <UART_Start_Receive_IT+0x92>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	227f      	movs	r2, #127	; 0x7f
 8004fa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fa4:	e008      	b.n	8004fb8 <UART_Start_Receive_IT+0xa4>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	223f      	movs	r2, #63	; 0x3f
 8004faa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fae:	e003      	b.n	8004fb8 <UART_Start_Receive_IT+0xa4>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2222      	movs	r2, #34	; 0x22
 8004fc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	657b      	str	r3, [r7, #84]	; 0x54
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e5      	bne.n	8004fc6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	d107      	bne.n	8005014 <UART_Start_Receive_IT+0x100>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d103      	bne.n	8005014 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <UART_Start_Receive_IT+0x18c>)
 8005010:	665a      	str	r2, [r3, #100]	; 0x64
 8005012:	e002      	b.n	800501a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <UART_Start_Receive_IT+0x190>)
 8005018:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d019      	beq.n	800505e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800504e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e6      	bne.n	800502a <UART_Start_Receive_IT+0x116>
 800505c:	e018      	b.n	8005090 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	613b      	str	r3, [r7, #16]
   return(result);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f043 0320 	orr.w	r3, r3, #32
 8005072:	653b      	str	r3, [r7, #80]	; 0x50
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	61bb      	str	r3, [r7, #24]
   return(result);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e6      	bne.n	800505e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	375c      	adds	r7, #92	; 0x5c
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	0800534f 	.word	0x0800534f
 80050a4:	080051ef 	.word	0x080051ef

080050a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b095      	sub	sp, #84	; 0x54
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ce:	643b      	str	r3, [r7, #64]	; 0x40
 80050d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e6      	bne.n	80050b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e5      	bne.n	80050e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511a:	2b01      	cmp	r3, #1
 800511c:	d118      	bne.n	8005150 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	60bb      	str	r3, [r7, #8]
   return(result);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f023 0310 	bic.w	r3, r3, #16
 8005132:	647b      	str	r3, [r7, #68]	; 0x44
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	6979      	ldr	r1, [r7, #20]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	613b      	str	r3, [r7, #16]
   return(result);
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e6      	bne.n	800511e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005162:	bf00      	nop
 8005164:	3754      	adds	r7, #84	; 0x54
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff fa71 	bl	8004674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b088      	sub	sp, #32
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	613b      	str	r3, [r7, #16]
   return(result);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e6      	bne.n	80051a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fa3d 	bl	8004660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e6:	bf00      	nop
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b096      	sub	sp, #88	; 0x58
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005204:	2b22      	cmp	r3, #34	; 0x22
 8005206:	f040 8094 	bne.w	8005332 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005210:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005214:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005218:	b2d9      	uxtb	r1, r3
 800521a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800521e:	b2da      	uxtb	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005224:	400a      	ands	r2, r1
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d179      	bne.n	8005346 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005266:	653b      	str	r3, [r7, #80]	; 0x50
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005270:	647b      	str	r3, [r7, #68]	; 0x44
 8005272:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800527e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e6      	bne.n	8005252 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	623b      	str	r3, [r7, #32]
   return(result);
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a4:	633a      	str	r2, [r7, #48]	; 0x30
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e5      	bne.n	8005284 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d12e      	bne.n	800532a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0310 	bic.w	r3, r3, #16
 80052e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	69b9      	ldr	r1, [r7, #24]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	617b      	str	r3, [r7, #20]
   return(result);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e6      	bne.n	80052d2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b10      	cmp	r3, #16
 8005310:	d103      	bne.n	800531a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2210      	movs	r2, #16
 8005318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff f9b0 	bl	8004688 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005328:	e00d      	b.n	8005346 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb fd60 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 8005330:	e009      	b.n	8005346 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	8b1b      	ldrh	r3, [r3, #24]
 8005338:	b29a      	uxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0208 	orr.w	r2, r2, #8
 8005342:	b292      	uxth	r2, r2
 8005344:	831a      	strh	r2, [r3, #24]
}
 8005346:	bf00      	nop
 8005348:	3758      	adds	r7, #88	; 0x58
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b096      	sub	sp, #88	; 0x58
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800535c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005364:	2b22      	cmp	r3, #34	; 0x22
 8005366:	f040 8094 	bne.w	8005492 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005370:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800537a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800537e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005382:	4013      	ands	r3, r2
 8005384:	b29a      	uxth	r2, r3
 8005386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005388:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	1c9a      	adds	r2, r3, #2
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d179      	bne.n	80054a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d0:	643b      	str	r3, [r7, #64]	; 0x40
 80053d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e6      	bne.n	80053b2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3308      	adds	r3, #8
 80053ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3308      	adds	r3, #8
 8005402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800540a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e5      	bne.n	80053e4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005428:	2b01      	cmp	r3, #1
 800542a:	d12e      	bne.n	800548a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f023 0310 	bic.w	r3, r3, #16
 8005446:	647b      	str	r3, [r7, #68]	; 0x44
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6979      	ldr	r1, [r7, #20]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	613b      	str	r3, [r7, #16]
   return(result);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b10      	cmp	r3, #16
 8005470:	d103      	bne.n	800547a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2210      	movs	r2, #16
 8005478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff f900 	bl	8004688 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005488:	e00d      	b.n	80054a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fb fcb0 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 8005490:	e009      	b.n	80054a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	8b1b      	ldrh	r3, [r3, #24]
 8005498:	b29a      	uxth	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0208 	orr.w	r2, r2, #8
 80054a2:	b292      	uxth	r2, r2
 80054a4:	831a      	strh	r2, [r3, #24]
}
 80054a6:	bf00      	nop
 80054a8:	3758      	adds	r7, #88	; 0x58
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <__errno>:
 80054c4:	4b01      	ldr	r3, [pc, #4]	; (80054cc <__errno+0x8>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000000c 	.word	0x2000000c

080054d0 <__libc_init_array>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	4d0d      	ldr	r5, [pc, #52]	; (8005508 <__libc_init_array+0x38>)
 80054d4:	4c0d      	ldr	r4, [pc, #52]	; (800550c <__libc_init_array+0x3c>)
 80054d6:	1b64      	subs	r4, r4, r5
 80054d8:	10a4      	asrs	r4, r4, #2
 80054da:	2600      	movs	r6, #0
 80054dc:	42a6      	cmp	r6, r4
 80054de:	d109      	bne.n	80054f4 <__libc_init_array+0x24>
 80054e0:	4d0b      	ldr	r5, [pc, #44]	; (8005510 <__libc_init_array+0x40>)
 80054e2:	4c0c      	ldr	r4, [pc, #48]	; (8005514 <__libc_init_array+0x44>)
 80054e4:	f000 fc4e 	bl	8005d84 <_init>
 80054e8:	1b64      	subs	r4, r4, r5
 80054ea:	10a4      	asrs	r4, r4, #2
 80054ec:	2600      	movs	r6, #0
 80054ee:	42a6      	cmp	r6, r4
 80054f0:	d105      	bne.n	80054fe <__libc_init_array+0x2e>
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f8:	4798      	blx	r3
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7ee      	b.n	80054dc <__libc_init_array+0xc>
 80054fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005502:	4798      	blx	r3
 8005504:	3601      	adds	r6, #1
 8005506:	e7f2      	b.n	80054ee <__libc_init_array+0x1e>
 8005508:	08005e44 	.word	0x08005e44
 800550c:	08005e44 	.word	0x08005e44
 8005510:	08005e44 	.word	0x08005e44
 8005514:	08005e48 	.word	0x08005e48

08005518 <memset>:
 8005518:	4402      	add	r2, r0
 800551a:	4603      	mov	r3, r0
 800551c:	4293      	cmp	r3, r2
 800551e:	d100      	bne.n	8005522 <memset+0xa>
 8005520:	4770      	bx	lr
 8005522:	f803 1b01 	strb.w	r1, [r3], #1
 8005526:	e7f9      	b.n	800551c <memset+0x4>

08005528 <siprintf>:
 8005528:	b40e      	push	{r1, r2, r3}
 800552a:	b500      	push	{lr}
 800552c:	b09c      	sub	sp, #112	; 0x70
 800552e:	ab1d      	add	r3, sp, #116	; 0x74
 8005530:	9002      	str	r0, [sp, #8]
 8005532:	9006      	str	r0, [sp, #24]
 8005534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005538:	4809      	ldr	r0, [pc, #36]	; (8005560 <siprintf+0x38>)
 800553a:	9107      	str	r1, [sp, #28]
 800553c:	9104      	str	r1, [sp, #16]
 800553e:	4909      	ldr	r1, [pc, #36]	; (8005564 <siprintf+0x3c>)
 8005540:	f853 2b04 	ldr.w	r2, [r3], #4
 8005544:	9105      	str	r1, [sp, #20]
 8005546:	6800      	ldr	r0, [r0, #0]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	a902      	add	r1, sp, #8
 800554c:	f000 f868 	bl	8005620 <_svfiprintf_r>
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	b01c      	add	sp, #112	; 0x70
 8005558:	f85d eb04 	ldr.w	lr, [sp], #4
 800555c:	b003      	add	sp, #12
 800555e:	4770      	bx	lr
 8005560:	2000000c 	.word	0x2000000c
 8005564:	ffff0208 	.word	0xffff0208

08005568 <__ssputs_r>:
 8005568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	688e      	ldr	r6, [r1, #8]
 800556e:	429e      	cmp	r6, r3
 8005570:	4682      	mov	sl, r0
 8005572:	460c      	mov	r4, r1
 8005574:	4690      	mov	r8, r2
 8005576:	461f      	mov	r7, r3
 8005578:	d838      	bhi.n	80055ec <__ssputs_r+0x84>
 800557a:	898a      	ldrh	r2, [r1, #12]
 800557c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005580:	d032      	beq.n	80055e8 <__ssputs_r+0x80>
 8005582:	6825      	ldr	r5, [r4, #0]
 8005584:	6909      	ldr	r1, [r1, #16]
 8005586:	eba5 0901 	sub.w	r9, r5, r1
 800558a:	6965      	ldr	r5, [r4, #20]
 800558c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005590:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005594:	3301      	adds	r3, #1
 8005596:	444b      	add	r3, r9
 8005598:	106d      	asrs	r5, r5, #1
 800559a:	429d      	cmp	r5, r3
 800559c:	bf38      	it	cc
 800559e:	461d      	movcc	r5, r3
 80055a0:	0553      	lsls	r3, r2, #21
 80055a2:	d531      	bpl.n	8005608 <__ssputs_r+0xa0>
 80055a4:	4629      	mov	r1, r5
 80055a6:	f000 fb47 	bl	8005c38 <_malloc_r>
 80055aa:	4606      	mov	r6, r0
 80055ac:	b950      	cbnz	r0, 80055c4 <__ssputs_r+0x5c>
 80055ae:	230c      	movs	r3, #12
 80055b0:	f8ca 3000 	str.w	r3, [sl]
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ba:	81a3      	strh	r3, [r4, #12]
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295
 80055c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c4:	6921      	ldr	r1, [r4, #16]
 80055c6:	464a      	mov	r2, r9
 80055c8:	f000 fabe 	bl	8005b48 <memcpy>
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	6126      	str	r6, [r4, #16]
 80055da:	6165      	str	r5, [r4, #20]
 80055dc:	444e      	add	r6, r9
 80055de:	eba5 0509 	sub.w	r5, r5, r9
 80055e2:	6026      	str	r6, [r4, #0]
 80055e4:	60a5      	str	r5, [r4, #8]
 80055e6:	463e      	mov	r6, r7
 80055e8:	42be      	cmp	r6, r7
 80055ea:	d900      	bls.n	80055ee <__ssputs_r+0x86>
 80055ec:	463e      	mov	r6, r7
 80055ee:	4632      	mov	r2, r6
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	4641      	mov	r1, r8
 80055f4:	f000 fab6 	bl	8005b64 <memmove>
 80055f8:	68a3      	ldr	r3, [r4, #8]
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	1b9b      	subs	r3, r3, r6
 80055fe:	4432      	add	r2, r6
 8005600:	60a3      	str	r3, [r4, #8]
 8005602:	6022      	str	r2, [r4, #0]
 8005604:	2000      	movs	r0, #0
 8005606:	e7db      	b.n	80055c0 <__ssputs_r+0x58>
 8005608:	462a      	mov	r2, r5
 800560a:	f000 fb6f 	bl	8005cec <_realloc_r>
 800560e:	4606      	mov	r6, r0
 8005610:	2800      	cmp	r0, #0
 8005612:	d1e1      	bne.n	80055d8 <__ssputs_r+0x70>
 8005614:	6921      	ldr	r1, [r4, #16]
 8005616:	4650      	mov	r0, sl
 8005618:	f000 fabe 	bl	8005b98 <_free_r>
 800561c:	e7c7      	b.n	80055ae <__ssputs_r+0x46>
	...

08005620 <_svfiprintf_r>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	4698      	mov	r8, r3
 8005626:	898b      	ldrh	r3, [r1, #12]
 8005628:	061b      	lsls	r3, r3, #24
 800562a:	b09d      	sub	sp, #116	; 0x74
 800562c:	4607      	mov	r7, r0
 800562e:	460d      	mov	r5, r1
 8005630:	4614      	mov	r4, r2
 8005632:	d50e      	bpl.n	8005652 <_svfiprintf_r+0x32>
 8005634:	690b      	ldr	r3, [r1, #16]
 8005636:	b963      	cbnz	r3, 8005652 <_svfiprintf_r+0x32>
 8005638:	2140      	movs	r1, #64	; 0x40
 800563a:	f000 fafd 	bl	8005c38 <_malloc_r>
 800563e:	6028      	str	r0, [r5, #0]
 8005640:	6128      	str	r0, [r5, #16]
 8005642:	b920      	cbnz	r0, 800564e <_svfiprintf_r+0x2e>
 8005644:	230c      	movs	r3, #12
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	e0d1      	b.n	80057f2 <_svfiprintf_r+0x1d2>
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	616b      	str	r3, [r5, #20]
 8005652:	2300      	movs	r3, #0
 8005654:	9309      	str	r3, [sp, #36]	; 0x24
 8005656:	2320      	movs	r3, #32
 8005658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800565c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005660:	2330      	movs	r3, #48	; 0x30
 8005662:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800580c <_svfiprintf_r+0x1ec>
 8005666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800566a:	f04f 0901 	mov.w	r9, #1
 800566e:	4623      	mov	r3, r4
 8005670:	469a      	mov	sl, r3
 8005672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005676:	b10a      	cbz	r2, 800567c <_svfiprintf_r+0x5c>
 8005678:	2a25      	cmp	r2, #37	; 0x25
 800567a:	d1f9      	bne.n	8005670 <_svfiprintf_r+0x50>
 800567c:	ebba 0b04 	subs.w	fp, sl, r4
 8005680:	d00b      	beq.n	800569a <_svfiprintf_r+0x7a>
 8005682:	465b      	mov	r3, fp
 8005684:	4622      	mov	r2, r4
 8005686:	4629      	mov	r1, r5
 8005688:	4638      	mov	r0, r7
 800568a:	f7ff ff6d 	bl	8005568 <__ssputs_r>
 800568e:	3001      	adds	r0, #1
 8005690:	f000 80aa 	beq.w	80057e8 <_svfiprintf_r+0x1c8>
 8005694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005696:	445a      	add	r2, fp
 8005698:	9209      	str	r2, [sp, #36]	; 0x24
 800569a:	f89a 3000 	ldrb.w	r3, [sl]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80a2 	beq.w	80057e8 <_svfiprintf_r+0x1c8>
 80056a4:	2300      	movs	r3, #0
 80056a6:	f04f 32ff 	mov.w	r2, #4294967295
 80056aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ae:	f10a 0a01 	add.w	sl, sl, #1
 80056b2:	9304      	str	r3, [sp, #16]
 80056b4:	9307      	str	r3, [sp, #28]
 80056b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056ba:	931a      	str	r3, [sp, #104]	; 0x68
 80056bc:	4654      	mov	r4, sl
 80056be:	2205      	movs	r2, #5
 80056c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c4:	4851      	ldr	r0, [pc, #324]	; (800580c <_svfiprintf_r+0x1ec>)
 80056c6:	f7fa fd8b 	bl	80001e0 <memchr>
 80056ca:	9a04      	ldr	r2, [sp, #16]
 80056cc:	b9d8      	cbnz	r0, 8005706 <_svfiprintf_r+0xe6>
 80056ce:	06d0      	lsls	r0, r2, #27
 80056d0:	bf44      	itt	mi
 80056d2:	2320      	movmi	r3, #32
 80056d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056d8:	0711      	lsls	r1, r2, #28
 80056da:	bf44      	itt	mi
 80056dc:	232b      	movmi	r3, #43	; 0x2b
 80056de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e2:	f89a 3000 	ldrb.w	r3, [sl]
 80056e6:	2b2a      	cmp	r3, #42	; 0x2a
 80056e8:	d015      	beq.n	8005716 <_svfiprintf_r+0xf6>
 80056ea:	9a07      	ldr	r2, [sp, #28]
 80056ec:	4654      	mov	r4, sl
 80056ee:	2000      	movs	r0, #0
 80056f0:	f04f 0c0a 	mov.w	ip, #10
 80056f4:	4621      	mov	r1, r4
 80056f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056fa:	3b30      	subs	r3, #48	; 0x30
 80056fc:	2b09      	cmp	r3, #9
 80056fe:	d94e      	bls.n	800579e <_svfiprintf_r+0x17e>
 8005700:	b1b0      	cbz	r0, 8005730 <_svfiprintf_r+0x110>
 8005702:	9207      	str	r2, [sp, #28]
 8005704:	e014      	b.n	8005730 <_svfiprintf_r+0x110>
 8005706:	eba0 0308 	sub.w	r3, r0, r8
 800570a:	fa09 f303 	lsl.w	r3, r9, r3
 800570e:	4313      	orrs	r3, r2
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	46a2      	mov	sl, r4
 8005714:	e7d2      	b.n	80056bc <_svfiprintf_r+0x9c>
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	1d19      	adds	r1, r3, #4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	9103      	str	r1, [sp, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	bfbb      	ittet	lt
 8005722:	425b      	neglt	r3, r3
 8005724:	f042 0202 	orrlt.w	r2, r2, #2
 8005728:	9307      	strge	r3, [sp, #28]
 800572a:	9307      	strlt	r3, [sp, #28]
 800572c:	bfb8      	it	lt
 800572e:	9204      	strlt	r2, [sp, #16]
 8005730:	7823      	ldrb	r3, [r4, #0]
 8005732:	2b2e      	cmp	r3, #46	; 0x2e
 8005734:	d10c      	bne.n	8005750 <_svfiprintf_r+0x130>
 8005736:	7863      	ldrb	r3, [r4, #1]
 8005738:	2b2a      	cmp	r3, #42	; 0x2a
 800573a:	d135      	bne.n	80057a8 <_svfiprintf_r+0x188>
 800573c:	9b03      	ldr	r3, [sp, #12]
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	9203      	str	r2, [sp, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	bfb8      	it	lt
 8005748:	f04f 33ff 	movlt.w	r3, #4294967295
 800574c:	3402      	adds	r4, #2
 800574e:	9305      	str	r3, [sp, #20]
 8005750:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800581c <_svfiprintf_r+0x1fc>
 8005754:	7821      	ldrb	r1, [r4, #0]
 8005756:	2203      	movs	r2, #3
 8005758:	4650      	mov	r0, sl
 800575a:	f7fa fd41 	bl	80001e0 <memchr>
 800575e:	b140      	cbz	r0, 8005772 <_svfiprintf_r+0x152>
 8005760:	2340      	movs	r3, #64	; 0x40
 8005762:	eba0 000a 	sub.w	r0, r0, sl
 8005766:	fa03 f000 	lsl.w	r0, r3, r0
 800576a:	9b04      	ldr	r3, [sp, #16]
 800576c:	4303      	orrs	r3, r0
 800576e:	3401      	adds	r4, #1
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005776:	4826      	ldr	r0, [pc, #152]	; (8005810 <_svfiprintf_r+0x1f0>)
 8005778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800577c:	2206      	movs	r2, #6
 800577e:	f7fa fd2f 	bl	80001e0 <memchr>
 8005782:	2800      	cmp	r0, #0
 8005784:	d038      	beq.n	80057f8 <_svfiprintf_r+0x1d8>
 8005786:	4b23      	ldr	r3, [pc, #140]	; (8005814 <_svfiprintf_r+0x1f4>)
 8005788:	bb1b      	cbnz	r3, 80057d2 <_svfiprintf_r+0x1b2>
 800578a:	9b03      	ldr	r3, [sp, #12]
 800578c:	3307      	adds	r3, #7
 800578e:	f023 0307 	bic.w	r3, r3, #7
 8005792:	3308      	adds	r3, #8
 8005794:	9303      	str	r3, [sp, #12]
 8005796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005798:	4433      	add	r3, r6
 800579a:	9309      	str	r3, [sp, #36]	; 0x24
 800579c:	e767      	b.n	800566e <_svfiprintf_r+0x4e>
 800579e:	fb0c 3202 	mla	r2, ip, r2, r3
 80057a2:	460c      	mov	r4, r1
 80057a4:	2001      	movs	r0, #1
 80057a6:	e7a5      	b.n	80056f4 <_svfiprintf_r+0xd4>
 80057a8:	2300      	movs	r3, #0
 80057aa:	3401      	adds	r4, #1
 80057ac:	9305      	str	r3, [sp, #20]
 80057ae:	4619      	mov	r1, r3
 80057b0:	f04f 0c0a 	mov.w	ip, #10
 80057b4:	4620      	mov	r0, r4
 80057b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ba:	3a30      	subs	r2, #48	; 0x30
 80057bc:	2a09      	cmp	r2, #9
 80057be:	d903      	bls.n	80057c8 <_svfiprintf_r+0x1a8>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0c5      	beq.n	8005750 <_svfiprintf_r+0x130>
 80057c4:	9105      	str	r1, [sp, #20]
 80057c6:	e7c3      	b.n	8005750 <_svfiprintf_r+0x130>
 80057c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057cc:	4604      	mov	r4, r0
 80057ce:	2301      	movs	r3, #1
 80057d0:	e7f0      	b.n	80057b4 <_svfiprintf_r+0x194>
 80057d2:	ab03      	add	r3, sp, #12
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	462a      	mov	r2, r5
 80057d8:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <_svfiprintf_r+0x1f8>)
 80057da:	a904      	add	r1, sp, #16
 80057dc:	4638      	mov	r0, r7
 80057de:	f3af 8000 	nop.w
 80057e2:	1c42      	adds	r2, r0, #1
 80057e4:	4606      	mov	r6, r0
 80057e6:	d1d6      	bne.n	8005796 <_svfiprintf_r+0x176>
 80057e8:	89ab      	ldrh	r3, [r5, #12]
 80057ea:	065b      	lsls	r3, r3, #25
 80057ec:	f53f af2c 	bmi.w	8005648 <_svfiprintf_r+0x28>
 80057f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057f2:	b01d      	add	sp, #116	; 0x74
 80057f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f8:	ab03      	add	r3, sp, #12
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	462a      	mov	r2, r5
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <_svfiprintf_r+0x1f8>)
 8005800:	a904      	add	r1, sp, #16
 8005802:	4638      	mov	r0, r7
 8005804:	f000 f87a 	bl	80058fc <_printf_i>
 8005808:	e7eb      	b.n	80057e2 <_svfiprintf_r+0x1c2>
 800580a:	bf00      	nop
 800580c:	08005e08 	.word	0x08005e08
 8005810:	08005e12 	.word	0x08005e12
 8005814:	00000000 	.word	0x00000000
 8005818:	08005569 	.word	0x08005569
 800581c:	08005e0e 	.word	0x08005e0e

08005820 <_printf_common>:
 8005820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	4616      	mov	r6, r2
 8005826:	4699      	mov	r9, r3
 8005828:	688a      	ldr	r2, [r1, #8]
 800582a:	690b      	ldr	r3, [r1, #16]
 800582c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005830:	4293      	cmp	r3, r2
 8005832:	bfb8      	it	lt
 8005834:	4613      	movlt	r3, r2
 8005836:	6033      	str	r3, [r6, #0]
 8005838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800583c:	4607      	mov	r7, r0
 800583e:	460c      	mov	r4, r1
 8005840:	b10a      	cbz	r2, 8005846 <_printf_common+0x26>
 8005842:	3301      	adds	r3, #1
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	0699      	lsls	r1, r3, #26
 800584a:	bf42      	ittt	mi
 800584c:	6833      	ldrmi	r3, [r6, #0]
 800584e:	3302      	addmi	r3, #2
 8005850:	6033      	strmi	r3, [r6, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	f015 0506 	ands.w	r5, r5, #6
 8005858:	d106      	bne.n	8005868 <_printf_common+0x48>
 800585a:	f104 0a19 	add.w	sl, r4, #25
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	42ab      	cmp	r3, r5
 8005866:	dc26      	bgt.n	80058b6 <_printf_common+0x96>
 8005868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800586c:	1e13      	subs	r3, r2, #0
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	bf18      	it	ne
 8005872:	2301      	movne	r3, #1
 8005874:	0692      	lsls	r2, r2, #26
 8005876:	d42b      	bmi.n	80058d0 <_printf_common+0xb0>
 8005878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587c:	4649      	mov	r1, r9
 800587e:	4638      	mov	r0, r7
 8005880:	47c0      	blx	r8
 8005882:	3001      	adds	r0, #1
 8005884:	d01e      	beq.n	80058c4 <_printf_common+0xa4>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	68e5      	ldr	r5, [r4, #12]
 800588a:	6832      	ldr	r2, [r6, #0]
 800588c:	f003 0306 	and.w	r3, r3, #6
 8005890:	2b04      	cmp	r3, #4
 8005892:	bf08      	it	eq
 8005894:	1aad      	subeq	r5, r5, r2
 8005896:	68a3      	ldr	r3, [r4, #8]
 8005898:	6922      	ldr	r2, [r4, #16]
 800589a:	bf0c      	ite	eq
 800589c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a0:	2500      	movne	r5, #0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	bfc4      	itt	gt
 80058a6:	1a9b      	subgt	r3, r3, r2
 80058a8:	18ed      	addgt	r5, r5, r3
 80058aa:	2600      	movs	r6, #0
 80058ac:	341a      	adds	r4, #26
 80058ae:	42b5      	cmp	r5, r6
 80058b0:	d11a      	bne.n	80058e8 <_printf_common+0xc8>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e008      	b.n	80058c8 <_printf_common+0xa8>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4649      	mov	r1, r9
 80058bc:	4638      	mov	r0, r7
 80058be:	47c0      	blx	r8
 80058c0:	3001      	adds	r0, #1
 80058c2:	d103      	bne.n	80058cc <_printf_common+0xac>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058cc:	3501      	adds	r5, #1
 80058ce:	e7c6      	b.n	800585e <_printf_common+0x3e>
 80058d0:	18e1      	adds	r1, r4, r3
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	2030      	movs	r0, #48	; 0x30
 80058d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058da:	4422      	add	r2, r4
 80058dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058e4:	3302      	adds	r3, #2
 80058e6:	e7c7      	b.n	8005878 <_printf_common+0x58>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4622      	mov	r2, r4
 80058ec:	4649      	mov	r1, r9
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c0      	blx	r8
 80058f2:	3001      	adds	r0, #1
 80058f4:	d0e6      	beq.n	80058c4 <_printf_common+0xa4>
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7d9      	b.n	80058ae <_printf_common+0x8e>
	...

080058fc <_printf_i>:
 80058fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	460c      	mov	r4, r1
 8005902:	4691      	mov	r9, r2
 8005904:	7e27      	ldrb	r7, [r4, #24]
 8005906:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005908:	2f78      	cmp	r7, #120	; 0x78
 800590a:	4680      	mov	r8, r0
 800590c:	469a      	mov	sl, r3
 800590e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005912:	d807      	bhi.n	8005924 <_printf_i+0x28>
 8005914:	2f62      	cmp	r7, #98	; 0x62
 8005916:	d80a      	bhi.n	800592e <_printf_i+0x32>
 8005918:	2f00      	cmp	r7, #0
 800591a:	f000 80d8 	beq.w	8005ace <_printf_i+0x1d2>
 800591e:	2f58      	cmp	r7, #88	; 0x58
 8005920:	f000 80a3 	beq.w	8005a6a <_printf_i+0x16e>
 8005924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800592c:	e03a      	b.n	80059a4 <_printf_i+0xa8>
 800592e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005932:	2b15      	cmp	r3, #21
 8005934:	d8f6      	bhi.n	8005924 <_printf_i+0x28>
 8005936:	a001      	add	r0, pc, #4	; (adr r0, 800593c <_printf_i+0x40>)
 8005938:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800593c:	08005995 	.word	0x08005995
 8005940:	080059a9 	.word	0x080059a9
 8005944:	08005925 	.word	0x08005925
 8005948:	08005925 	.word	0x08005925
 800594c:	08005925 	.word	0x08005925
 8005950:	08005925 	.word	0x08005925
 8005954:	080059a9 	.word	0x080059a9
 8005958:	08005925 	.word	0x08005925
 800595c:	08005925 	.word	0x08005925
 8005960:	08005925 	.word	0x08005925
 8005964:	08005925 	.word	0x08005925
 8005968:	08005ab5 	.word	0x08005ab5
 800596c:	080059d9 	.word	0x080059d9
 8005970:	08005a97 	.word	0x08005a97
 8005974:	08005925 	.word	0x08005925
 8005978:	08005925 	.word	0x08005925
 800597c:	08005ad7 	.word	0x08005ad7
 8005980:	08005925 	.word	0x08005925
 8005984:	080059d9 	.word	0x080059d9
 8005988:	08005925 	.word	0x08005925
 800598c:	08005925 	.word	0x08005925
 8005990:	08005a9f 	.word	0x08005a9f
 8005994:	680b      	ldr	r3, [r1, #0]
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	600a      	str	r2, [r1, #0]
 800599c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0a3      	b.n	8005af0 <_printf_i+0x1f4>
 80059a8:	6825      	ldr	r5, [r4, #0]
 80059aa:	6808      	ldr	r0, [r1, #0]
 80059ac:	062e      	lsls	r6, r5, #24
 80059ae:	f100 0304 	add.w	r3, r0, #4
 80059b2:	d50a      	bpl.n	80059ca <_printf_i+0xce>
 80059b4:	6805      	ldr	r5, [r0, #0]
 80059b6:	600b      	str	r3, [r1, #0]
 80059b8:	2d00      	cmp	r5, #0
 80059ba:	da03      	bge.n	80059c4 <_printf_i+0xc8>
 80059bc:	232d      	movs	r3, #45	; 0x2d
 80059be:	426d      	negs	r5, r5
 80059c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c4:	485e      	ldr	r0, [pc, #376]	; (8005b40 <_printf_i+0x244>)
 80059c6:	230a      	movs	r3, #10
 80059c8:	e019      	b.n	80059fe <_printf_i+0x102>
 80059ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059ce:	6805      	ldr	r5, [r0, #0]
 80059d0:	600b      	str	r3, [r1, #0]
 80059d2:	bf18      	it	ne
 80059d4:	b22d      	sxthne	r5, r5
 80059d6:	e7ef      	b.n	80059b8 <_printf_i+0xbc>
 80059d8:	680b      	ldr	r3, [r1, #0]
 80059da:	6825      	ldr	r5, [r4, #0]
 80059dc:	1d18      	adds	r0, r3, #4
 80059de:	6008      	str	r0, [r1, #0]
 80059e0:	0628      	lsls	r0, r5, #24
 80059e2:	d501      	bpl.n	80059e8 <_printf_i+0xec>
 80059e4:	681d      	ldr	r5, [r3, #0]
 80059e6:	e002      	b.n	80059ee <_printf_i+0xf2>
 80059e8:	0669      	lsls	r1, r5, #25
 80059ea:	d5fb      	bpl.n	80059e4 <_printf_i+0xe8>
 80059ec:	881d      	ldrh	r5, [r3, #0]
 80059ee:	4854      	ldr	r0, [pc, #336]	; (8005b40 <_printf_i+0x244>)
 80059f0:	2f6f      	cmp	r7, #111	; 0x6f
 80059f2:	bf0c      	ite	eq
 80059f4:	2308      	moveq	r3, #8
 80059f6:	230a      	movne	r3, #10
 80059f8:	2100      	movs	r1, #0
 80059fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059fe:	6866      	ldr	r6, [r4, #4]
 8005a00:	60a6      	str	r6, [r4, #8]
 8005a02:	2e00      	cmp	r6, #0
 8005a04:	bfa2      	ittt	ge
 8005a06:	6821      	ldrge	r1, [r4, #0]
 8005a08:	f021 0104 	bicge.w	r1, r1, #4
 8005a0c:	6021      	strge	r1, [r4, #0]
 8005a0e:	b90d      	cbnz	r5, 8005a14 <_printf_i+0x118>
 8005a10:	2e00      	cmp	r6, #0
 8005a12:	d04d      	beq.n	8005ab0 <_printf_i+0x1b4>
 8005a14:	4616      	mov	r6, r2
 8005a16:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a1a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a1e:	5dc7      	ldrb	r7, [r0, r7]
 8005a20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a24:	462f      	mov	r7, r5
 8005a26:	42bb      	cmp	r3, r7
 8005a28:	460d      	mov	r5, r1
 8005a2a:	d9f4      	bls.n	8005a16 <_printf_i+0x11a>
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d10b      	bne.n	8005a48 <_printf_i+0x14c>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	07df      	lsls	r7, r3, #31
 8005a34:	d508      	bpl.n	8005a48 <_printf_i+0x14c>
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	6861      	ldr	r1, [r4, #4]
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	bfde      	ittt	le
 8005a3e:	2330      	movle	r3, #48	; 0x30
 8005a40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a48:	1b92      	subs	r2, r2, r6
 8005a4a:	6122      	str	r2, [r4, #16]
 8005a4c:	f8cd a000 	str.w	sl, [sp]
 8005a50:	464b      	mov	r3, r9
 8005a52:	aa03      	add	r2, sp, #12
 8005a54:	4621      	mov	r1, r4
 8005a56:	4640      	mov	r0, r8
 8005a58:	f7ff fee2 	bl	8005820 <_printf_common>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d14c      	bne.n	8005afa <_printf_i+0x1fe>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	b004      	add	sp, #16
 8005a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6a:	4835      	ldr	r0, [pc, #212]	; (8005b40 <_printf_i+0x244>)
 8005a6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	680e      	ldr	r6, [r1, #0]
 8005a74:	061f      	lsls	r7, r3, #24
 8005a76:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a7a:	600e      	str	r6, [r1, #0]
 8005a7c:	d514      	bpl.n	8005aa8 <_printf_i+0x1ac>
 8005a7e:	07d9      	lsls	r1, r3, #31
 8005a80:	bf44      	itt	mi
 8005a82:	f043 0320 	orrmi.w	r3, r3, #32
 8005a86:	6023      	strmi	r3, [r4, #0]
 8005a88:	b91d      	cbnz	r5, 8005a92 <_printf_i+0x196>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	f023 0320 	bic.w	r3, r3, #32
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	2310      	movs	r3, #16
 8005a94:	e7b0      	b.n	80059f8 <_printf_i+0xfc>
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	f043 0320 	orr.w	r3, r3, #32
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	2378      	movs	r3, #120	; 0x78
 8005aa0:	4828      	ldr	r0, [pc, #160]	; (8005b44 <_printf_i+0x248>)
 8005aa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aa6:	e7e3      	b.n	8005a70 <_printf_i+0x174>
 8005aa8:	065e      	lsls	r6, r3, #25
 8005aaa:	bf48      	it	mi
 8005aac:	b2ad      	uxthmi	r5, r5
 8005aae:	e7e6      	b.n	8005a7e <_printf_i+0x182>
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	e7bb      	b.n	8005a2c <_printf_i+0x130>
 8005ab4:	680b      	ldr	r3, [r1, #0]
 8005ab6:	6826      	ldr	r6, [r4, #0]
 8005ab8:	6960      	ldr	r0, [r4, #20]
 8005aba:	1d1d      	adds	r5, r3, #4
 8005abc:	600d      	str	r5, [r1, #0]
 8005abe:	0635      	lsls	r5, r6, #24
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	d501      	bpl.n	8005ac8 <_printf_i+0x1cc>
 8005ac4:	6018      	str	r0, [r3, #0]
 8005ac6:	e002      	b.n	8005ace <_printf_i+0x1d2>
 8005ac8:	0671      	lsls	r1, r6, #25
 8005aca:	d5fb      	bpl.n	8005ac4 <_printf_i+0x1c8>
 8005acc:	8018      	strh	r0, [r3, #0]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	4616      	mov	r6, r2
 8005ad4:	e7ba      	b.n	8005a4c <_printf_i+0x150>
 8005ad6:	680b      	ldr	r3, [r1, #0]
 8005ad8:	1d1a      	adds	r2, r3, #4
 8005ada:	600a      	str	r2, [r1, #0]
 8005adc:	681e      	ldr	r6, [r3, #0]
 8005ade:	6862      	ldr	r2, [r4, #4]
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7fa fb7c 	bl	80001e0 <memchr>
 8005ae8:	b108      	cbz	r0, 8005aee <_printf_i+0x1f2>
 8005aea:	1b80      	subs	r0, r0, r6
 8005aec:	6060      	str	r0, [r4, #4]
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	6123      	str	r3, [r4, #16]
 8005af2:	2300      	movs	r3, #0
 8005af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af8:	e7a8      	b.n	8005a4c <_printf_i+0x150>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	4632      	mov	r2, r6
 8005afe:	4649      	mov	r1, r9
 8005b00:	4640      	mov	r0, r8
 8005b02:	47d0      	blx	sl
 8005b04:	3001      	adds	r0, #1
 8005b06:	d0ab      	beq.n	8005a60 <_printf_i+0x164>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	079b      	lsls	r3, r3, #30
 8005b0c:	d413      	bmi.n	8005b36 <_printf_i+0x23a>
 8005b0e:	68e0      	ldr	r0, [r4, #12]
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	4298      	cmp	r0, r3
 8005b14:	bfb8      	it	lt
 8005b16:	4618      	movlt	r0, r3
 8005b18:	e7a4      	b.n	8005a64 <_printf_i+0x168>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4632      	mov	r2, r6
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4640      	mov	r0, r8
 8005b22:	47d0      	blx	sl
 8005b24:	3001      	adds	r0, #1
 8005b26:	d09b      	beq.n	8005a60 <_printf_i+0x164>
 8005b28:	3501      	adds	r5, #1
 8005b2a:	68e3      	ldr	r3, [r4, #12]
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	1a5b      	subs	r3, r3, r1
 8005b30:	42ab      	cmp	r3, r5
 8005b32:	dcf2      	bgt.n	8005b1a <_printf_i+0x21e>
 8005b34:	e7eb      	b.n	8005b0e <_printf_i+0x212>
 8005b36:	2500      	movs	r5, #0
 8005b38:	f104 0619 	add.w	r6, r4, #25
 8005b3c:	e7f5      	b.n	8005b2a <_printf_i+0x22e>
 8005b3e:	bf00      	nop
 8005b40:	08005e19 	.word	0x08005e19
 8005b44:	08005e2a 	.word	0x08005e2a

08005b48 <memcpy>:
 8005b48:	440a      	add	r2, r1
 8005b4a:	4291      	cmp	r1, r2
 8005b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b50:	d100      	bne.n	8005b54 <memcpy+0xc>
 8005b52:	4770      	bx	lr
 8005b54:	b510      	push	{r4, lr}
 8005b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	d1f9      	bne.n	8005b56 <memcpy+0xe>
 8005b62:	bd10      	pop	{r4, pc}

08005b64 <memmove>:
 8005b64:	4288      	cmp	r0, r1
 8005b66:	b510      	push	{r4, lr}
 8005b68:	eb01 0402 	add.w	r4, r1, r2
 8005b6c:	d902      	bls.n	8005b74 <memmove+0x10>
 8005b6e:	4284      	cmp	r4, r0
 8005b70:	4623      	mov	r3, r4
 8005b72:	d807      	bhi.n	8005b84 <memmove+0x20>
 8005b74:	1e43      	subs	r3, r0, #1
 8005b76:	42a1      	cmp	r1, r4
 8005b78:	d008      	beq.n	8005b8c <memmove+0x28>
 8005b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b82:	e7f8      	b.n	8005b76 <memmove+0x12>
 8005b84:	4402      	add	r2, r0
 8005b86:	4601      	mov	r1, r0
 8005b88:	428a      	cmp	r2, r1
 8005b8a:	d100      	bne.n	8005b8e <memmove+0x2a>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b96:	e7f7      	b.n	8005b88 <memmove+0x24>

08005b98 <_free_r>:
 8005b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b9a:	2900      	cmp	r1, #0
 8005b9c:	d048      	beq.n	8005c30 <_free_r+0x98>
 8005b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba2:	9001      	str	r0, [sp, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8005baa:	bfb8      	it	lt
 8005bac:	18e4      	addlt	r4, r4, r3
 8005bae:	f000 f8d3 	bl	8005d58 <__malloc_lock>
 8005bb2:	4a20      	ldr	r2, [pc, #128]	; (8005c34 <_free_r+0x9c>)
 8005bb4:	9801      	ldr	r0, [sp, #4]
 8005bb6:	6813      	ldr	r3, [r2, #0]
 8005bb8:	4615      	mov	r5, r2
 8005bba:	b933      	cbnz	r3, 8005bca <_free_r+0x32>
 8005bbc:	6063      	str	r3, [r4, #4]
 8005bbe:	6014      	str	r4, [r2, #0]
 8005bc0:	b003      	add	sp, #12
 8005bc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bc6:	f000 b8cd 	b.w	8005d64 <__malloc_unlock>
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	d90b      	bls.n	8005be6 <_free_r+0x4e>
 8005bce:	6821      	ldr	r1, [r4, #0]
 8005bd0:	1862      	adds	r2, r4, r1
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	bf04      	itt	eq
 8005bd6:	681a      	ldreq	r2, [r3, #0]
 8005bd8:	685b      	ldreq	r3, [r3, #4]
 8005bda:	6063      	str	r3, [r4, #4]
 8005bdc:	bf04      	itt	eq
 8005bde:	1852      	addeq	r2, r2, r1
 8005be0:	6022      	streq	r2, [r4, #0]
 8005be2:	602c      	str	r4, [r5, #0]
 8005be4:	e7ec      	b.n	8005bc0 <_free_r+0x28>
 8005be6:	461a      	mov	r2, r3
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	b10b      	cbz	r3, 8005bf0 <_free_r+0x58>
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d9fa      	bls.n	8005be6 <_free_r+0x4e>
 8005bf0:	6811      	ldr	r1, [r2, #0]
 8005bf2:	1855      	adds	r5, r2, r1
 8005bf4:	42a5      	cmp	r5, r4
 8005bf6:	d10b      	bne.n	8005c10 <_free_r+0x78>
 8005bf8:	6824      	ldr	r4, [r4, #0]
 8005bfa:	4421      	add	r1, r4
 8005bfc:	1854      	adds	r4, r2, r1
 8005bfe:	42a3      	cmp	r3, r4
 8005c00:	6011      	str	r1, [r2, #0]
 8005c02:	d1dd      	bne.n	8005bc0 <_free_r+0x28>
 8005c04:	681c      	ldr	r4, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	6053      	str	r3, [r2, #4]
 8005c0a:	4421      	add	r1, r4
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	e7d7      	b.n	8005bc0 <_free_r+0x28>
 8005c10:	d902      	bls.n	8005c18 <_free_r+0x80>
 8005c12:	230c      	movs	r3, #12
 8005c14:	6003      	str	r3, [r0, #0]
 8005c16:	e7d3      	b.n	8005bc0 <_free_r+0x28>
 8005c18:	6825      	ldr	r5, [r4, #0]
 8005c1a:	1961      	adds	r1, r4, r5
 8005c1c:	428b      	cmp	r3, r1
 8005c1e:	bf04      	itt	eq
 8005c20:	6819      	ldreq	r1, [r3, #0]
 8005c22:	685b      	ldreq	r3, [r3, #4]
 8005c24:	6063      	str	r3, [r4, #4]
 8005c26:	bf04      	itt	eq
 8005c28:	1949      	addeq	r1, r1, r5
 8005c2a:	6021      	streq	r1, [r4, #0]
 8005c2c:	6054      	str	r4, [r2, #4]
 8005c2e:	e7c7      	b.n	8005bc0 <_free_r+0x28>
 8005c30:	b003      	add	sp, #12
 8005c32:	bd30      	pop	{r4, r5, pc}
 8005c34:	200000cc 	.word	0x200000cc

08005c38 <_malloc_r>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	1ccd      	adds	r5, r1, #3
 8005c3c:	f025 0503 	bic.w	r5, r5, #3
 8005c40:	3508      	adds	r5, #8
 8005c42:	2d0c      	cmp	r5, #12
 8005c44:	bf38      	it	cc
 8005c46:	250c      	movcc	r5, #12
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	db01      	blt.n	8005c52 <_malloc_r+0x1a>
 8005c4e:	42a9      	cmp	r1, r5
 8005c50:	d903      	bls.n	8005c5a <_malloc_r+0x22>
 8005c52:	230c      	movs	r3, #12
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	2000      	movs	r0, #0
 8005c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c5a:	f000 f87d 	bl	8005d58 <__malloc_lock>
 8005c5e:	4921      	ldr	r1, [pc, #132]	; (8005ce4 <_malloc_r+0xac>)
 8005c60:	680a      	ldr	r2, [r1, #0]
 8005c62:	4614      	mov	r4, r2
 8005c64:	b99c      	cbnz	r4, 8005c8e <_malloc_r+0x56>
 8005c66:	4f20      	ldr	r7, [pc, #128]	; (8005ce8 <_malloc_r+0xb0>)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	b923      	cbnz	r3, 8005c76 <_malloc_r+0x3e>
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f000 f862 	bl	8005d38 <_sbrk_r>
 8005c74:	6038      	str	r0, [r7, #0]
 8005c76:	4629      	mov	r1, r5
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 f85d 	bl	8005d38 <_sbrk_r>
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d123      	bne.n	8005cca <_malloc_r+0x92>
 8005c82:	230c      	movs	r3, #12
 8005c84:	6033      	str	r3, [r6, #0]
 8005c86:	4630      	mov	r0, r6
 8005c88:	f000 f86c 	bl	8005d64 <__malloc_unlock>
 8005c8c:	e7e3      	b.n	8005c56 <_malloc_r+0x1e>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	1b5b      	subs	r3, r3, r5
 8005c92:	d417      	bmi.n	8005cc4 <_malloc_r+0x8c>
 8005c94:	2b0b      	cmp	r3, #11
 8005c96:	d903      	bls.n	8005ca0 <_malloc_r+0x68>
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	441c      	add	r4, r3
 8005c9c:	6025      	str	r5, [r4, #0]
 8005c9e:	e004      	b.n	8005caa <_malloc_r+0x72>
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	42a2      	cmp	r2, r4
 8005ca4:	bf0c      	ite	eq
 8005ca6:	600b      	streq	r3, [r1, #0]
 8005ca8:	6053      	strne	r3, [r2, #4]
 8005caa:	4630      	mov	r0, r6
 8005cac:	f000 f85a 	bl	8005d64 <__malloc_unlock>
 8005cb0:	f104 000b 	add.w	r0, r4, #11
 8005cb4:	1d23      	adds	r3, r4, #4
 8005cb6:	f020 0007 	bic.w	r0, r0, #7
 8005cba:	1ac2      	subs	r2, r0, r3
 8005cbc:	d0cc      	beq.n	8005c58 <_malloc_r+0x20>
 8005cbe:	1a1b      	subs	r3, r3, r0
 8005cc0:	50a3      	str	r3, [r4, r2]
 8005cc2:	e7c9      	b.n	8005c58 <_malloc_r+0x20>
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	6864      	ldr	r4, [r4, #4]
 8005cc8:	e7cc      	b.n	8005c64 <_malloc_r+0x2c>
 8005cca:	1cc4      	adds	r4, r0, #3
 8005ccc:	f024 0403 	bic.w	r4, r4, #3
 8005cd0:	42a0      	cmp	r0, r4
 8005cd2:	d0e3      	beq.n	8005c9c <_malloc_r+0x64>
 8005cd4:	1a21      	subs	r1, r4, r0
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f000 f82e 	bl	8005d38 <_sbrk_r>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d1dd      	bne.n	8005c9c <_malloc_r+0x64>
 8005ce0:	e7cf      	b.n	8005c82 <_malloc_r+0x4a>
 8005ce2:	bf00      	nop
 8005ce4:	200000cc 	.word	0x200000cc
 8005ce8:	200000d0 	.word	0x200000d0

08005cec <_realloc_r>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	4607      	mov	r7, r0
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	460e      	mov	r6, r1
 8005cf4:	b921      	cbnz	r1, 8005d00 <_realloc_r+0x14>
 8005cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	f7ff bf9c 	b.w	8005c38 <_malloc_r>
 8005d00:	b922      	cbnz	r2, 8005d0c <_realloc_r+0x20>
 8005d02:	f7ff ff49 	bl	8005b98 <_free_r>
 8005d06:	4625      	mov	r5, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d0c:	f000 f830 	bl	8005d70 <_malloc_usable_size_r>
 8005d10:	42a0      	cmp	r0, r4
 8005d12:	d20f      	bcs.n	8005d34 <_realloc_r+0x48>
 8005d14:	4621      	mov	r1, r4
 8005d16:	4638      	mov	r0, r7
 8005d18:	f7ff ff8e 	bl	8005c38 <_malloc_r>
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d0f2      	beq.n	8005d08 <_realloc_r+0x1c>
 8005d22:	4631      	mov	r1, r6
 8005d24:	4622      	mov	r2, r4
 8005d26:	f7ff ff0f 	bl	8005b48 <memcpy>
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f7ff ff33 	bl	8005b98 <_free_r>
 8005d32:	e7e9      	b.n	8005d08 <_realloc_r+0x1c>
 8005d34:	4635      	mov	r5, r6
 8005d36:	e7e7      	b.n	8005d08 <_realloc_r+0x1c>

08005d38 <_sbrk_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d06      	ldr	r5, [pc, #24]	; (8005d54 <_sbrk_r+0x1c>)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4604      	mov	r4, r0
 8005d40:	4608      	mov	r0, r1
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	f7fb f9ce 	bl	80010e4 <_sbrk>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_sbrk_r+0x1a>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_sbrk_r+0x1a>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	200001f0 	.word	0x200001f0

08005d58 <__malloc_lock>:
 8005d58:	4801      	ldr	r0, [pc, #4]	; (8005d60 <__malloc_lock+0x8>)
 8005d5a:	f000 b811 	b.w	8005d80 <__retarget_lock_acquire_recursive>
 8005d5e:	bf00      	nop
 8005d60:	200001f8 	.word	0x200001f8

08005d64 <__malloc_unlock>:
 8005d64:	4801      	ldr	r0, [pc, #4]	; (8005d6c <__malloc_unlock+0x8>)
 8005d66:	f000 b80c 	b.w	8005d82 <__retarget_lock_release_recursive>
 8005d6a:	bf00      	nop
 8005d6c:	200001f8 	.word	0x200001f8

08005d70 <_malloc_usable_size_r>:
 8005d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d74:	1f18      	subs	r0, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfbc      	itt	lt
 8005d7a:	580b      	ldrlt	r3, [r1, r0]
 8005d7c:	18c0      	addlt	r0, r0, r3
 8005d7e:	4770      	bx	lr

08005d80 <__retarget_lock_acquire_recursive>:
 8005d80:	4770      	bx	lr

08005d82 <__retarget_lock_release_recursive>:
 8005d82:	4770      	bx	lr

08005d84 <_init>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	bf00      	nop
 8005d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8a:	bc08      	pop	{r3}
 8005d8c:	469e      	mov	lr, r3
 8005d8e:	4770      	bx	lr

08005d90 <_fini>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	bf00      	nop
 8005d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d96:	bc08      	pop	{r3}
 8005d98:	469e      	mov	lr, r3
 8005d9a:	4770      	bx	lr
